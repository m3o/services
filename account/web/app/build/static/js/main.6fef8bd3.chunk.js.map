{"version":3,"sources":["assets/images/spinner.gif","api/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BaseURL","Call","path","token","params","a","headers","axios","post","User","args","id","firstName","lastName","email","username","this","App","props","Cookies","get","state","saving","then","res","setState","user","data","catch","err","error","message","undefined","e","target","name","value","preventDefault","finally","className","onSubmit","bind","type","disabled","onChange","renderLoading","renderNoToken","src","Spinner","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6fef8bd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.26ef8bb4.gif\";","import axios from 'axios';\n\n// const BaseURL = 'http://localhost:8080/users/'\nconst BaseURL = 'https://api.micro.mu/users/'\n\nexport default async function Call(path: string, token: string, params?: any): Promise<any> {\n  const headers = { 'Authorization': 'Bearer ' + token };\n  return axios.post(BaseURL + path, params, { headers });\n}\n\nexport class User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  username: string;\n\n  constructor(args: any) {\n    this.id = args.id;\n    this.firstName = args.firstName;\n    this.lastName = args.lastName;\n    this.email = args.email;\n    this.username = args.username;\n  }\n}","import React from 'react';\nimport Cookies from 'js-cookie';\nimport Call, { User } from './api';\nimport Spinner from './assets/images/spinner.gif'; \nimport './App.scss';\n\ninterface Props {}\n\ninterface State {\n  token?: string;\n  error?: string;\n  user?: User;\n  saving: boolean;\n}\n\nexport default class App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const token = Cookies.get('micro_token');\n    this.state = { token, saving: false };\n  }\n\n  componentDidMount() {\n    if(!this.state.token) return;\n\n    Call(\"Read\", this.state.token)\n      .then(res => this.setState({ user: res.data.user }))\n      .catch(err => this.setState({ error: err.message, token: undefined }))\n  }\n\n  onChange(e:any) {\n    this.setState({ user: new User({\n      ...this.state.user,\n      [e.target.name]: e.target.value,\n    })});\n  };\n\n  onSubmit(e:any) {\n    e.preventDefault();\n    this.setState({ saving: true });\n\n    const { token, user } = this.state;\n    Call(\"Update\", token!, { user })\n      .then(() => this.setState({ error: '' }))\n      .catch(err => this.setState({ error: err.message }))\n      .finally(() => this.setState({ saving: false }))\n  }\n\n  render(): JSX.Element {\n    const { error, token, user, saving } = this.state;\n    if(!token) return this.renderNoToken();\n    if(!user) return this.renderLoading();\n\n    return (\n      <div className=\"App\">\n        <h1>Your Profile</h1>\n        <p className='error'>{error}</p>\n\n        <form onSubmit={this.onSubmit.bind(this)}>\n          <label>First Name</label>\n          <input\n            type='text'\n            name='firstName'\n            value={user!.firstName} \n            disabled={this.state.saving}\n            onChange={this.onChange.bind(this)} />\n          \n          <label>Last Name</label>\n          <input\n            type='text'\n            name='lastName'\n            value={user!.lastName} \n            disabled={this.state.saving}\n            onChange={this.onChange.bind(this)} />\n          \n          <label>Email</label>\n          <input\n            name='email'\n            type='email'\n            value={user!.email}\n            disabled={this.state.saving}\n            onChange={this.onChange.bind(this)} />\n          \n          <label>Username</label>\n          <input\n            name='username'\n            type='text'\n            value={user!.username}\n            disabled={this.state.saving}\n            onChange={this.onChange.bind(this)} />\n\n          <input disabled={this.state.saving} type='submit' value={ saving ? 'Saving' : 'Save Changes' } />\n        </form>\n      </div>\n    );\n  }\n\n  renderNoToken(): JSX.Element {\n    return(\n      <div className=\"App\">\n        <h1>Not Logged In</h1>\n        <p>You cannot edit your profile as you're not logged in.</p>\n      </div>\n    );\n  }\n\n  renderLoading(): JSX.Element {\n    return(\n      <div className=\"App\">\n        <img className='spinner' src={Spinner} alt='Loading' />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}