// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	go_micro_service_signup "github.com/m3o/services/signup/proto/signup"

	mock "github.com/stretchr/testify/mock"
)

// SignupService is an autogenerated mock type for the SignupService type
type SignupService struct {
	mock.Mock
}

// CompleteSignup provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) CompleteSignup(ctx context.Context, in *go_micro_service_signup.CompleteSignupRequest, opts ...client.CallOption) (*go_micro_service_signup.CompleteSignupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.CompleteSignupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.CompleteSignupRequest, ...client.CallOption) *go_micro_service_signup.CompleteSignupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.CompleteSignupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.CompleteSignupRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) HasPaymentMethod(ctx context.Context, in *go_micro_service_signup.HasPaymentMethodRequest, opts ...client.CallOption) (*go_micro_service_signup.HasPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.HasPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.HasPaymentMethodRequest, ...client.CallOption) *go_micro_service_signup.HasPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.HasPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.HasPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recover provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) Recover(ctx context.Context, in *go_micro_service_signup.RecoverRequest, opts ...client.CallOption) (*go_micro_service_signup.RecoverResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.RecoverResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.RecoverRequest, ...client.CallOption) *go_micro_service_signup.RecoverResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.RecoverResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.RecoverRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendVerificationEmail provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) SendVerificationEmail(ctx context.Context, in *go_micro_service_signup.SendVerificationEmailRequest, opts ...client.CallOption) (*go_micro_service_signup.SendVerificationEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.SendVerificationEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.SendVerificationEmailRequest, ...client.CallOption) *go_micro_service_signup.SendVerificationEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.SendVerificationEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.SendVerificationEmailRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) SetPaymentMethod(ctx context.Context, in *go_micro_service_signup.SetPaymentMethodRequest, opts ...client.CallOption) (*go_micro_service_signup.SetPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.SetPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.SetPaymentMethodRequest, ...client.CallOption) *go_micro_service_signup.SetPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.SetPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.SetPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, in, opts
func (_m *SignupService) Verify(ctx context.Context, in *go_micro_service_signup.VerifyRequest, opts ...client.CallOption) (*go_micro_service_signup.VerifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_signup.VerifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_signup.VerifyRequest, ...client.CallOption) *go_micro_service_signup.VerifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_signup.VerifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_signup.VerifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
