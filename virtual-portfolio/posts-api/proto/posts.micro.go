// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/posts.proto

package posts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Posts service

type PostsService interface {
	Create(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error)
	CreateComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error)
	DeleteComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error)
	SetOpinion(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error)
	SetCommentOpinion(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error)
}

type postsService struct {
	c    client.Client
	name string
}

func NewPostsService(name string, c client.Client) PostsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "posts"
	}
	return &postsService{
		c:    c,
		name: name,
	}
}

func (c *postsService) Create(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) Get(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) Update(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) Delete(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) CreateComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.CreateComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) DeleteComment(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.DeleteComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) SetOpinion(ctx context.Context, in *Post, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.SetOpinion", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsService) SetCommentOpinion(ctx context.Context, in *Comment, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Posts.SetCommentOpinion", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Posts service

type PostsHandler interface {
	Create(context.Context, *Post, *Response) error
	Get(context.Context, *Post, *Response) error
	Update(context.Context, *Post, *Response) error
	Delete(context.Context, *Post, *Response) error
	CreateComment(context.Context, *Comment, *Response) error
	DeleteComment(context.Context, *Comment, *Response) error
	SetOpinion(context.Context, *Post, *Response) error
	SetCommentOpinion(context.Context, *Comment, *Response) error
}

func RegisterPostsHandler(s server.Server, hdlr PostsHandler, opts ...server.HandlerOption) error {
	type posts interface {
		Create(ctx context.Context, in *Post, out *Response) error
		Get(ctx context.Context, in *Post, out *Response) error
		Update(ctx context.Context, in *Post, out *Response) error
		Delete(ctx context.Context, in *Post, out *Response) error
		CreateComment(ctx context.Context, in *Comment, out *Response) error
		DeleteComment(ctx context.Context, in *Comment, out *Response) error
		SetOpinion(ctx context.Context, in *Post, out *Response) error
		SetCommentOpinion(ctx context.Context, in *Comment, out *Response) error
	}
	type Posts struct {
		posts
	}
	h := &postsHandler{hdlr}
	return s.Handle(s.NewHandler(&Posts{h}, opts...))
}

type postsHandler struct {
	PostsHandler
}

func (h *postsHandler) Create(ctx context.Context, in *Post, out *Response) error {
	return h.PostsHandler.Create(ctx, in, out)
}

func (h *postsHandler) Get(ctx context.Context, in *Post, out *Response) error {
	return h.PostsHandler.Get(ctx, in, out)
}

func (h *postsHandler) Update(ctx context.Context, in *Post, out *Response) error {
	return h.PostsHandler.Update(ctx, in, out)
}

func (h *postsHandler) Delete(ctx context.Context, in *Post, out *Response) error {
	return h.PostsHandler.Delete(ctx, in, out)
}

func (h *postsHandler) CreateComment(ctx context.Context, in *Comment, out *Response) error {
	return h.PostsHandler.CreateComment(ctx, in, out)
}

func (h *postsHandler) DeleteComment(ctx context.Context, in *Comment, out *Response) error {
	return h.PostsHandler.DeleteComment(ctx, in, out)
}

func (h *postsHandler) SetOpinion(ctx context.Context, in *Post, out *Response) error {
	return h.PostsHandler.SetOpinion(ctx, in, out)
}

func (h *postsHandler) SetCommentOpinion(ctx context.Context, in *Comment, out *Response) error {
	return h.PostsHandler.SetCommentOpinion(ctx, in, out)
}
