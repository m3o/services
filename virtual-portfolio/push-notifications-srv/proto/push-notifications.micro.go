// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/push-notifications.proto

package push_notifications

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PushNotifications service

type PushNotificationsService interface {
	RegisterToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
	SendNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*Notification, error)
}

type pushNotificationsService struct {
	c    client.Client
	name string
}

func NewPushNotificationsService(name string, c client.Client) PushNotificationsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pushnotifications"
	}
	return &pushNotificationsService{
		c:    c,
		name: name,
	}
}

func (c *pushNotificationsService) RegisterToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "PushNotifications.RegisterToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushNotificationsService) SendNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*Notification, error) {
	req := c.c.NewRequest(c.name, "PushNotifications.SendNotification", in)
	out := new(Notification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushNotifications service

type PushNotificationsHandler interface {
	RegisterToken(context.Context, *Token, *Token) error
	SendNotification(context.Context, *Notification, *Notification) error
}

func RegisterPushNotificationsHandler(s server.Server, hdlr PushNotificationsHandler, opts ...server.HandlerOption) error {
	type pushNotifications interface {
		RegisterToken(ctx context.Context, in *Token, out *Token) error
		SendNotification(ctx context.Context, in *Notification, out *Notification) error
	}
	type PushNotifications struct {
		pushNotifications
	}
	h := &pushNotificationsHandler{hdlr}
	return s.Handle(s.NewHandler(&PushNotifications{h}, opts...))
}

type pushNotificationsHandler struct {
	PushNotificationsHandler
}

func (h *pushNotificationsHandler) RegisterToken(ctx context.Context, in *Token, out *Token) error {
	return h.PushNotificationsHandler.RegisterToken(ctx, in, out)
}

func (h *pushNotificationsHandler) SendNotification(ctx context.Context, in *Notification, out *Notification) error {
	return h.PushNotificationsHandler.SendNotification(ctx, in, out)
}
