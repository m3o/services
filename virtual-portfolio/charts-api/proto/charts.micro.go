// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/charts.proto

package charts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Charts service

type ChartsService interface {
	GetStock(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error)
	GetInvestor(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error)
	GetPortfolio(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error)
}

type chartsService struct {
	c    client.Client
	name string
}

func NewChartsService(name string, c client.Client) ChartsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "charts"
	}
	return &chartsService{
		c:    c,
		name: name,
	}
}

func (c *chartsService) GetStock(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error) {
	req := c.c.NewRequest(c.name, "Charts.GetStock", in)
	out := new(Chart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartsService) GetInvestor(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error) {
	req := c.c.NewRequest(c.name, "Charts.GetInvestor", in)
	out := new(Chart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartsService) GetPortfolio(ctx context.Context, in *Request, opts ...client.CallOption) (*Chart, error) {
	req := c.c.NewRequest(c.name, "Charts.GetPortfolio", in)
	out := new(Chart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Charts service

type ChartsHandler interface {
	GetStock(context.Context, *Request, *Chart) error
	GetInvestor(context.Context, *Request, *Chart) error
	GetPortfolio(context.Context, *Request, *Chart) error
}

func RegisterChartsHandler(s server.Server, hdlr ChartsHandler, opts ...server.HandlerOption) error {
	type charts interface {
		GetStock(ctx context.Context, in *Request, out *Chart) error
		GetInvestor(ctx context.Context, in *Request, out *Chart) error
		GetPortfolio(ctx context.Context, in *Request, out *Chart) error
	}
	type Charts struct {
		charts
	}
	h := &chartsHandler{hdlr}
	return s.Handle(s.NewHandler(&Charts{h}, opts...))
}

type chartsHandler struct {
	ChartsHandler
}

func (h *chartsHandler) GetStock(ctx context.Context, in *Request, out *Chart) error {
	return h.ChartsHandler.GetStock(ctx, in, out)
}

func (h *chartsHandler) GetInvestor(ctx context.Context, in *Request, out *Chart) error {
	return h.ChartsHandler.GetInvestor(ctx, in, out)
}

func (h *chartsHandler) GetPortfolio(ctx context.Context, in *Request, out *Chart) error {
	return h.ChartsHandler.GetPortfolio(ctx, in, out)
}
