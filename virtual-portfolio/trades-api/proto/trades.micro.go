// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/trades.proto

package trades

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Trades service

type TradesService interface {
	GetAsset(ctx context.Context, in *Asset, opts ...client.CallOption) (*Asset, error)
	CreateTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error)
	SetTradeMetadata(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error)
}

type tradesService struct {
	c    client.Client
	name string
}

func NewTradesService(name string, c client.Client) TradesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "trades"
	}
	return &tradesService{
		c:    c,
		name: name,
	}
}

func (c *tradesService) GetAsset(ctx context.Context, in *Asset, opts ...client.CallOption) (*Asset, error) {
	req := c.c.NewRequest(c.name, "Trades.GetAsset", in)
	out := new(Asset)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) CreateTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error) {
	req := c.c.NewRequest(c.name, "Trades.CreateTrade", in)
	out := new(Trade)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) SetTradeMetadata(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error) {
	req := c.c.NewRequest(c.name, "Trades.SetTradeMetadata", in)
	out := new(Trade)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trades service

type TradesHandler interface {
	GetAsset(context.Context, *Asset, *Asset) error
	CreateTrade(context.Context, *Trade, *Trade) error
	SetTradeMetadata(context.Context, *Trade, *Trade) error
}

func RegisterTradesHandler(s server.Server, hdlr TradesHandler, opts ...server.HandlerOption) error {
	type trades interface {
		GetAsset(ctx context.Context, in *Asset, out *Asset) error
		CreateTrade(ctx context.Context, in *Trade, out *Trade) error
		SetTradeMetadata(ctx context.Context, in *Trade, out *Trade) error
	}
	type Trades struct {
		trades
	}
	h := &tradesHandler{hdlr}
	return s.Handle(s.NewHandler(&Trades{h}, opts...))
}

type tradesHandler struct {
	TradesHandler
}

func (h *tradesHandler) GetAsset(ctx context.Context, in *Asset, out *Asset) error {
	return h.TradesHandler.GetAsset(ctx, in, out)
}

func (h *tradesHandler) CreateTrade(ctx context.Context, in *Trade, out *Trade) error {
	return h.TradesHandler.CreateTrade(ctx, in, out)
}

func (h *tradesHandler) SetTradeMetadata(ctx context.Context, in *Trade, out *Trade) error {
	return h.TradesHandler.SetTradeMetadata(ctx, in, out)
}
