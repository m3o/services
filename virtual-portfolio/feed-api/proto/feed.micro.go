// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feed.proto

package feed

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Feed service

type FeedService interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetAssetFeed(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetInvestorFeed(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type feedService struct {
	c    client.Client
	name string
}

func NewFeedService(name string, c client.Client) FeedService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "feed"
	}
	return &feedService{
		c:    c,
		name: name,
	}
}

func (c *feedService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Feed.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetAssetFeed(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Feed.GetAssetFeed", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetInvestorFeed(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Feed.GetInvestorFeed", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Feed service

type FeedHandler interface {
	Get(context.Context, *Request, *Response) error
	GetAssetFeed(context.Context, *Request, *Response) error
	GetInvestorFeed(context.Context, *Request, *Response) error
}

func RegisterFeedHandler(s server.Server, hdlr FeedHandler, opts ...server.HandlerOption) error {
	type feed interface {
		Get(ctx context.Context, in *Request, out *Response) error
		GetAssetFeed(ctx context.Context, in *Request, out *Response) error
		GetInvestorFeed(ctx context.Context, in *Request, out *Response) error
	}
	type Feed struct {
		feed
	}
	h := &feedHandler{hdlr}
	return s.Handle(s.NewHandler(&Feed{h}, opts...))
}

type feedHandler struct {
	FeedHandler
}

func (h *feedHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.FeedHandler.Get(ctx, in, out)
}

func (h *feedHandler) GetAssetFeed(ctx context.Context, in *Request, out *Response) error {
	return h.FeedHandler.GetAssetFeed(ctx, in, out)
}

func (h *feedHandler) GetInvestorFeed(ctx context.Context, in *Request, out *Response) error {
	return h.FeedHandler.GetInvestorFeed(ctx, in, out)
}
