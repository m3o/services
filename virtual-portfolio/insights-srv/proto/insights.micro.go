// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/insights.proto

package insights

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Insights service

type InsightsService interface {
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...client.CallOption) (*ListAssetsResponse, error)
	ListInsights(ctx context.Context, in *ListInsightsRequest, opts ...client.CallOption) (*ListInsightsResponse, error)
	CreateUserView(ctx context.Context, in *UserView, opts ...client.CallOption) (*UserView, error)
}

type insightsService struct {
	c    client.Client
	name string
}

func NewInsightsService(name string, c client.Client) InsightsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "insights"
	}
	return &insightsService{
		c:    c,
		name: name,
	}
}

func (c *insightsService) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...client.CallOption) (*ListAssetsResponse, error) {
	req := c.c.NewRequest(c.name, "Insights.ListAssets", in)
	out := new(ListAssetsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsService) ListInsights(ctx context.Context, in *ListInsightsRequest, opts ...client.CallOption) (*ListInsightsResponse, error) {
	req := c.c.NewRequest(c.name, "Insights.ListInsights", in)
	out := new(ListInsightsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsService) CreateUserView(ctx context.Context, in *UserView, opts ...client.CallOption) (*UserView, error) {
	req := c.c.NewRequest(c.name, "Insights.CreateUserView", in)
	out := new(UserView)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Insights service

type InsightsHandler interface {
	ListAssets(context.Context, *ListAssetsRequest, *ListAssetsResponse) error
	ListInsights(context.Context, *ListInsightsRequest, *ListInsightsResponse) error
	CreateUserView(context.Context, *UserView, *UserView) error
}

func RegisterInsightsHandler(s server.Server, hdlr InsightsHandler, opts ...server.HandlerOption) error {
	type insights interface {
		ListAssets(ctx context.Context, in *ListAssetsRequest, out *ListAssetsResponse) error
		ListInsights(ctx context.Context, in *ListInsightsRequest, out *ListInsightsResponse) error
		CreateUserView(ctx context.Context, in *UserView, out *UserView) error
	}
	type Insights struct {
		insights
	}
	h := &insightsHandler{hdlr}
	return s.Handle(s.NewHandler(&Insights{h}, opts...))
}

type insightsHandler struct {
	InsightsHandler
}

func (h *insightsHandler) ListAssets(ctx context.Context, in *ListAssetsRequest, out *ListAssetsResponse) error {
	return h.InsightsHandler.ListAssets(ctx, in, out)
}

func (h *insightsHandler) ListInsights(ctx context.Context, in *ListInsightsRequest, out *ListInsightsResponse) error {
	return h.InsightsHandler.ListInsights(ctx, in, out)
}

func (h *insightsHandler) CreateUserView(ctx context.Context, in *UserView, out *UserView) error {
	return h.InsightsHandler.CreateUserView(ctx, in, out)
}
