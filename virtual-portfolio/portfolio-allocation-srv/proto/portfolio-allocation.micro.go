// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/portfolio-allocation.proto

package portfolio_allocation

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PortfolioAllocation service

type PortfolioAllocationService interface {
	Get(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type portfolioAllocationService struct {
	c    client.Client
	name string
}

func NewPortfolioAllocationService(name string, c client.Client) PortfolioAllocationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "portfolioallocation"
	}
	return &portfolioAllocationService{
		c:    c,
		name: name,
	}
}

func (c *portfolioAllocationService) Get(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error) {
	req := c.c.NewRequest(c.name, "PortfolioAllocation.Get", in)
	out := new(Portfolio)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioAllocationService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "PortfolioAllocation.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortfolioAllocation service

type PortfolioAllocationHandler interface {
	Get(context.Context, *Portfolio, *Portfolio) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterPortfolioAllocationHandler(s server.Server, hdlr PortfolioAllocationHandler, opts ...server.HandlerOption) error {
	type portfolioAllocation interface {
		Get(ctx context.Context, in *Portfolio, out *Portfolio) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type PortfolioAllocation struct {
		portfolioAllocation
	}
	h := &portfolioAllocationHandler{hdlr}
	return s.Handle(s.NewHandler(&PortfolioAllocation{h}, opts...))
}

type portfolioAllocationHandler struct {
	PortfolioAllocationHandler
}

func (h *portfolioAllocationHandler) Get(ctx context.Context, in *Portfolio, out *Portfolio) error {
	return h.PortfolioAllocationHandler.Get(ctx, in, out)
}

func (h *portfolioAllocationHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.PortfolioAllocationHandler.List(ctx, in, out)
}
