// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/investors.proto

package investors

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Investors service

type InvestorsService interface {
	Discover(ctx context.Context, in *DiscoverRequest, opts ...client.CallOption) (*DiscoverResponse, error)
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Follow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Unfollow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetFollowingAndFollowers(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type investorsService struct {
	c    client.Client
	name string
}

func NewInvestorsService(name string, c client.Client) InvestorsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "investors"
	}
	return &investorsService{
		c:    c,
		name: name,
	}
}

func (c *investorsService) Discover(ctx context.Context, in *DiscoverRequest, opts ...client.CallOption) (*DiscoverResponse, error) {
	req := c.c.NewRequest(c.name, "Investors.Discover", in)
	out := new(DiscoverResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorsService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Investors.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorsService) Follow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Investors.Follow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorsService) Unfollow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Investors.Unfollow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorsService) GetFollowingAndFollowers(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Investors.GetFollowingAndFollowers", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Investors service

type InvestorsHandler interface {
	Discover(context.Context, *DiscoverRequest, *DiscoverResponse) error
	Get(context.Context, *Request, *Response) error
	Follow(context.Context, *Request, *Response) error
	Unfollow(context.Context, *Request, *Response) error
	GetFollowingAndFollowers(context.Context, *Request, *Response) error
}

func RegisterInvestorsHandler(s server.Server, hdlr InvestorsHandler, opts ...server.HandlerOption) error {
	type investors interface {
		Discover(ctx context.Context, in *DiscoverRequest, out *DiscoverResponse) error
		Get(ctx context.Context, in *Request, out *Response) error
		Follow(ctx context.Context, in *Request, out *Response) error
		Unfollow(ctx context.Context, in *Request, out *Response) error
		GetFollowingAndFollowers(ctx context.Context, in *Request, out *Response) error
	}
	type Investors struct {
		investors
	}
	h := &investorsHandler{hdlr}
	return s.Handle(s.NewHandler(&Investors{h}, opts...))
}

type investorsHandler struct {
	InvestorsHandler
}

func (h *investorsHandler) Discover(ctx context.Context, in *DiscoverRequest, out *DiscoverResponse) error {
	return h.InvestorsHandler.Discover(ctx, in, out)
}

func (h *investorsHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.InvestorsHandler.Get(ctx, in, out)
}

func (h *investorsHandler) Follow(ctx context.Context, in *Request, out *Response) error {
	return h.InvestorsHandler.Follow(ctx, in, out)
}

func (h *investorsHandler) Unfollow(ctx context.Context, in *Request, out *Response) error {
	return h.InvestorsHandler.Unfollow(ctx, in, out)
}

func (h *investorsHandler) GetFollowingAndFollowers(ctx context.Context, in *Request, out *Response) error {
	return h.InvestorsHandler.GetFollowingAndFollowers(ctx, in, out)
}
