// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/portfolios.proto

package portfolios

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Portfolios service

type PortfoliosService interface {
	GetPortfolio(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error)
	GetInvestor(ctx context.Context, in *Investor, opts ...client.CallOption) (*Portfolio, error)
	SetTargets(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error)
}

type portfoliosService struct {
	c    client.Client
	name string
}

func NewPortfoliosService(name string, c client.Client) PortfoliosService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "portfolios"
	}
	return &portfoliosService{
		c:    c,
		name: name,
	}
}

func (c *portfoliosService) GetPortfolio(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error) {
	req := c.c.NewRequest(c.name, "Portfolios.GetPortfolio", in)
	out := new(Portfolio)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosService) GetInvestor(ctx context.Context, in *Investor, opts ...client.CallOption) (*Portfolio, error) {
	req := c.c.NewRequest(c.name, "Portfolios.GetInvestor", in)
	out := new(Portfolio)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfoliosService) SetTargets(ctx context.Context, in *Portfolio, opts ...client.CallOption) (*Portfolio, error) {
	req := c.c.NewRequest(c.name, "Portfolios.SetTargets", in)
	out := new(Portfolio)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Portfolios service

type PortfoliosHandler interface {
	GetPortfolio(context.Context, *Portfolio, *Portfolio) error
	GetInvestor(context.Context, *Investor, *Portfolio) error
	SetTargets(context.Context, *Portfolio, *Portfolio) error
}

func RegisterPortfoliosHandler(s server.Server, hdlr PortfoliosHandler, opts ...server.HandlerOption) error {
	type portfolios interface {
		GetPortfolio(ctx context.Context, in *Portfolio, out *Portfolio) error
		GetInvestor(ctx context.Context, in *Investor, out *Portfolio) error
		SetTargets(ctx context.Context, in *Portfolio, out *Portfolio) error
	}
	type Portfolios struct {
		portfolios
	}
	h := &portfoliosHandler{hdlr}
	return s.Handle(s.NewHandler(&Portfolios{h}, opts...))
}

type portfoliosHandler struct {
	PortfoliosHandler
}

func (h *portfoliosHandler) GetPortfolio(ctx context.Context, in *Portfolio, out *Portfolio) error {
	return h.PortfoliosHandler.GetPortfolio(ctx, in, out)
}

func (h *portfoliosHandler) GetInvestor(ctx context.Context, in *Investor, out *Portfolio) error {
	return h.PortfoliosHandler.GetInvestor(ctx, in, out)
}

func (h *portfoliosHandler) SetTargets(ctx context.Context, in *Portfolio, out *Portfolio) error {
	return h.PortfoliosHandler.SetTargets(ctx, in, out)
}
