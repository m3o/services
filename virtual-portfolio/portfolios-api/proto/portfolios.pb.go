// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/portfolios.proto

package portfolios

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Investor struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Investor) Reset()         { *m = Investor{} }
func (m *Investor) String() string { return proto.CompactTextString(m) }
func (*Investor) ProtoMessage()    {}
func (*Investor) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac9e0553d4fb04e, []int{0}
}

func (m *Investor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Investor.Unmarshal(m, b)
}
func (m *Investor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Investor.Marshal(b, m, deterministic)
}
func (m *Investor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Investor.Merge(m, src)
}
func (m *Investor) XXX_Size() int {
	return xxx_messageInfo_Investor.Size(m)
}
func (m *Investor) XXX_DiscardUnknown() {
	xxx_messageInfo_Investor.DiscardUnknown(m)
}

var xxx_messageInfo_Investor proto.InternalMessageInfo

func (m *Investor) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Portfolio struct {
	Uuid                                string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TotalValue                          int64       `protobuf:"varint,2,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	CashValue                           int64       `protobuf:"varint,3,opt,name=cash_value,json=cashValue,proto3" json:"cash_value,omitempty"`
	AssetsValue                         int64       `protobuf:"varint,4,opt,name=assets_value,json=assetsValue,proto3" json:"assets_value,omitempty"`
	Positions                           []*Position `protobuf:"bytes,5,rep,name=positions,proto3" json:"positions,omitempty"`
	AssetClasses                        []*Category `protobuf:"bytes,8,rep,name=asset_classes,json=assetClasses,proto3" json:"asset_classes,omitempty"`
	AssetIndustries                     []*Category `protobuf:"bytes,9,rep,name=asset_industries,json=assetIndustries,proto3" json:"asset_industries,omitempty"`
	AssetClassTargetStocks              float32     `protobuf:"fixed32,10,opt,name=asset_class_target_stocks,json=assetClassTargetStocks,proto3" json:"asset_class_target_stocks,omitempty"`
	AssetClassTargetCash                float32     `protobuf:"fixed32,11,opt,name=asset_class_target_cash,json=assetClassTargetCash,proto3" json:"asset_class_target_cash,omitempty"`
	IndustryTargetInformationTechnology float32     `protobuf:"fixed32,12,opt,name=industry_target_information_technology,json=industryTargetInformationTechnology,proto3" json:"industry_target_information_technology,omitempty"`
	IndustryTargetFinancials            float32     `protobuf:"fixed32,13,opt,name=industry_target_financials,json=industryTargetFinancials,proto3" json:"industry_target_financials,omitempty"`
	IndustryTargetEnergy                float32     `protobuf:"fixed32,14,opt,name=industry_target_energy,json=industryTargetEnergy,proto3" json:"industry_target_energy,omitempty"`
	IndustryTargetHealthCare            float32     `protobuf:"fixed32,15,opt,name=industry_target_health_care,json=industryTargetHealthCare,proto3" json:"industry_target_health_care,omitempty"`
	IndustryTargetMaterials             float32     `protobuf:"fixed32,16,opt,name=industry_target_materials,json=industryTargetMaterials,proto3" json:"industry_target_materials,omitempty"`
	IndustryTargetUtilities             float32     `protobuf:"fixed32,17,opt,name=industry_target_utilities,json=industryTargetUtilities,proto3" json:"industry_target_utilities,omitempty"`
	IndustryTargetRealEstate            float32     `protobuf:"fixed32,18,opt,name=industry_target_real_estate,json=industryTargetRealEstate,proto3" json:"industry_target_real_estate,omitempty"`
	IndustryTargetConsumerDiscretionary float32     `protobuf:"fixed32,19,opt,name=industry_target_consumer_discretionary,json=industryTargetConsumerDiscretionary,proto3" json:"industry_target_consumer_discretionary,omitempty"`
	IndustryTargetConsumerStaples       float32     `protobuf:"fixed32,20,opt,name=industry_target_consumer_staples,json=industryTargetConsumerStaples,proto3" json:"industry_target_consumer_staples,omitempty"`
	IndustryTargetCommunicationServices float32     `protobuf:"fixed32,21,opt,name=industry_target_communication_services,json=industryTargetCommunicationServices,proto3" json:"industry_target_communication_services,omitempty"`
	IndustryTargetIndustrials           float32     `protobuf:"fixed32,22,opt,name=industry_target_industrials,json=industryTargetIndustrials,proto3" json:"industry_target_industrials,omitempty"`
	LifetimeGain                        int64       `protobuf:"varint,6,opt,name=lifetime_gain,json=lifetimeGain,proto3" json:"lifetime_gain,omitempty"`
	LifetimeGainPercentage              float32     `protobuf:"fixed32,7,opt,name=lifetime_gain_percentage,json=lifetimeGainPercentage,proto3" json:"lifetime_gain_percentage,omitempty"`
	OneDayGain                          int64       `protobuf:"varint,23,opt,name=one_day_gain,json=oneDayGain,proto3" json:"one_day_gain,omitempty"`
	OneDayGainPercentage                float32     `protobuf:"fixed32,24,opt,name=one_day_gain_percentage,json=oneDayGainPercentage,proto3" json:"one_day_gain_percentage,omitempty"`
	XXX_NoUnkeyedLiteral                struct{}    `json:"-"`
	XXX_unrecognized                    []byte      `json:"-"`
	XXX_sizecache                       int32       `json:"-"`
}

func (m *Portfolio) Reset()         { *m = Portfolio{} }
func (m *Portfolio) String() string { return proto.CompactTextString(m) }
func (*Portfolio) ProtoMessage()    {}
func (*Portfolio) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac9e0553d4fb04e, []int{1}
}

func (m *Portfolio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Portfolio.Unmarshal(m, b)
}
func (m *Portfolio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Portfolio.Marshal(b, m, deterministic)
}
func (m *Portfolio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Portfolio.Merge(m, src)
}
func (m *Portfolio) XXX_Size() int {
	return xxx_messageInfo_Portfolio.Size(m)
}
func (m *Portfolio) XXX_DiscardUnknown() {
	xxx_messageInfo_Portfolio.DiscardUnknown(m)
}

var xxx_messageInfo_Portfolio proto.InternalMessageInfo

func (m *Portfolio) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Portfolio) GetTotalValue() int64 {
	if m != nil {
		return m.TotalValue
	}
	return 0
}

func (m *Portfolio) GetCashValue() int64 {
	if m != nil {
		return m.CashValue
	}
	return 0
}

func (m *Portfolio) GetAssetsValue() int64 {
	if m != nil {
		return m.AssetsValue
	}
	return 0
}

func (m *Portfolio) GetPositions() []*Position {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *Portfolio) GetAssetClasses() []*Category {
	if m != nil {
		return m.AssetClasses
	}
	return nil
}

func (m *Portfolio) GetAssetIndustries() []*Category {
	if m != nil {
		return m.AssetIndustries
	}
	return nil
}

func (m *Portfolio) GetAssetClassTargetStocks() float32 {
	if m != nil {
		return m.AssetClassTargetStocks
	}
	return 0
}

func (m *Portfolio) GetAssetClassTargetCash() float32 {
	if m != nil {
		return m.AssetClassTargetCash
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetInformationTechnology() float32 {
	if m != nil {
		return m.IndustryTargetInformationTechnology
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetFinancials() float32 {
	if m != nil {
		return m.IndustryTargetFinancials
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetEnergy() float32 {
	if m != nil {
		return m.IndustryTargetEnergy
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetHealthCare() float32 {
	if m != nil {
		return m.IndustryTargetHealthCare
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetMaterials() float32 {
	if m != nil {
		return m.IndustryTargetMaterials
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetUtilities() float32 {
	if m != nil {
		return m.IndustryTargetUtilities
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetRealEstate() float32 {
	if m != nil {
		return m.IndustryTargetRealEstate
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetConsumerDiscretionary() float32 {
	if m != nil {
		return m.IndustryTargetConsumerDiscretionary
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetConsumerStaples() float32 {
	if m != nil {
		return m.IndustryTargetConsumerStaples
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetCommunicationServices() float32 {
	if m != nil {
		return m.IndustryTargetCommunicationServices
	}
	return 0
}

func (m *Portfolio) GetIndustryTargetIndustrials() float32 {
	if m != nil {
		return m.IndustryTargetIndustrials
	}
	return 0
}

func (m *Portfolio) GetLifetimeGain() int64 {
	if m != nil {
		return m.LifetimeGain
	}
	return 0
}

func (m *Portfolio) GetLifetimeGainPercentage() float32 {
	if m != nil {
		return m.LifetimeGainPercentage
	}
	return 0
}

func (m *Portfolio) GetOneDayGain() int64 {
	if m != nil {
		return m.OneDayGain
	}
	return 0
}

func (m *Portfolio) GetOneDayGainPercentage() float32 {
	if m != nil {
		return m.OneDayGainPercentage
	}
	return 0
}

type Category struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CurrentPercentage    float32  `protobuf:"fixed32,2,opt,name=current_percentage,json=currentPercentage,proto3" json:"current_percentage,omitempty"`
	TargetPercentage     float32  `protobuf:"fixed32,3,opt,name=target_percentage,json=targetPercentage,proto3" json:"target_percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac9e0553d4fb04e, []int{2}
}

func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (m *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(m, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Category) GetCurrentPercentage() float32 {
	if m != nil {
		return m.CurrentPercentage
	}
	return 0
}

func (m *Category) GetTargetPercentage() float32 {
	if m != nil {
		return m.TargetPercentage
	}
	return 0
}

type Position struct {
	AssetType               string   `protobuf:"bytes,1,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	AssetUuid               string   `protobuf:"bytes,2,opt,name=asset_uuid,json=assetUuid,proto3" json:"asset_uuid,omitempty"`
	AssetName               string   `protobuf:"bytes,3,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	AssetSector             string   `protobuf:"bytes,4,opt,name=asset_sector,json=assetSector,proto3" json:"asset_sector,omitempty"`
	AssetColor              string   `protobuf:"bytes,5,opt,name=asset_color,json=assetColor,proto3" json:"asset_color,omitempty"`
	AssetDescription        string   `protobuf:"bytes,6,opt,name=asset_description,json=assetDescription,proto3" json:"asset_description,omitempty"`
	AssetProfilePictureUrl  string   `protobuf:"bytes,7,opt,name=asset_profile_picture_url,json=assetProfilePictureUrl,proto3" json:"asset_profile_picture_url,omitempty"`
	AssetFollowing          bool     `protobuf:"varint,15,opt,name=asset_following,json=assetFollowing,proto3" json:"asset_following,omitempty"`
	Quantity                int64    `protobuf:"varint,8,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice               int64    `protobuf:"varint,9,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Value                   int64    `protobuf:"varint,10,opt,name=value,proto3" json:"value,omitempty"`
	BookCost                int64    `protobuf:"varint,11,opt,name=book_cost,json=bookCost,proto3" json:"book_cost,omitempty"`
	PercentageOfPortfolio   float32  `protobuf:"fixed32,12,opt,name=percentage_of_portfolio,json=percentageOfPortfolio,proto3" json:"percentage_of_portfolio,omitempty"`
	GainLoss                int64    `protobuf:"varint,13,opt,name=gain_loss,json=gainLoss,proto3" json:"gain_loss,omitempty"`
	GainLossPercentage      float32  `protobuf:"fixed32,14,opt,name=gain_loss_percentage,json=gainLossPercentage,proto3" json:"gain_loss_percentage,omitempty"`
	OneDayChangePercentage  float32  `protobuf:"fixed32,16,opt,name=one_day_change_percentage,json=oneDayChangePercentage,proto3" json:"one_day_change_percentage,omitempty"`
	PrevDayChangePercentage float32  `protobuf:"fixed32,17,opt,name=prev_day_change_percentage,json=prevDayChangePercentage,proto3" json:"prev_day_change_percentage,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac9e0553d4fb04e, []int{3}
}

func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *Position) GetAssetUuid() string {
	if m != nil {
		return m.AssetUuid
	}
	return ""
}

func (m *Position) GetAssetName() string {
	if m != nil {
		return m.AssetName
	}
	return ""
}

func (m *Position) GetAssetSector() string {
	if m != nil {
		return m.AssetSector
	}
	return ""
}

func (m *Position) GetAssetColor() string {
	if m != nil {
		return m.AssetColor
	}
	return ""
}

func (m *Position) GetAssetDescription() string {
	if m != nil {
		return m.AssetDescription
	}
	return ""
}

func (m *Position) GetAssetProfilePictureUrl() string {
	if m != nil {
		return m.AssetProfilePictureUrl
	}
	return ""
}

func (m *Position) GetAssetFollowing() bool {
	if m != nil {
		return m.AssetFollowing
	}
	return false
}

func (m *Position) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Position) GetUnitPrice() int64 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *Position) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Position) GetBookCost() int64 {
	if m != nil {
		return m.BookCost
	}
	return 0
}

func (m *Position) GetPercentageOfPortfolio() float32 {
	if m != nil {
		return m.PercentageOfPortfolio
	}
	return 0
}

func (m *Position) GetGainLoss() int64 {
	if m != nil {
		return m.GainLoss
	}
	return 0
}

func (m *Position) GetGainLossPercentage() float32 {
	if m != nil {
		return m.GainLossPercentage
	}
	return 0
}

func (m *Position) GetOneDayChangePercentage() float32 {
	if m != nil {
		return m.OneDayChangePercentage
	}
	return 0
}

func (m *Position) GetPrevDayChangePercentage() float32 {
	if m != nil {
		return m.PrevDayChangePercentage
	}
	return 0
}

func init() {
	proto.RegisterType((*Investor)(nil), "Investor")
	proto.RegisterType((*Portfolio)(nil), "Portfolio")
	proto.RegisterType((*Category)(nil), "Category")
	proto.RegisterType((*Position)(nil), "Position")
}

func init() { proto.RegisterFile("proto/portfolios.proto", fileDescriptor_fac9e0553d4fb04e) }

var fileDescriptor_fac9e0553d4fb04e = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0x5e, 0xe2, 0xa6, 0xb3, 0x8e, 0x9d, 0x36, 0xe1, 0x52, 0x9b, 0x49, 0xd0, 0xcd, 0x4b, 0x81,
	0xd6, 0xc0, 0x30, 0x6f, 0xe8, 0xda, 0x61, 0xdd, 0xed, 0xc5, 0x69, 0xb3, 0x00, 0xbb, 0x18, 0x72,
	0xb2, 0x57, 0x81, 0x95, 0x8f, 0x6d, 0xa2, 0x32, 0xa9, 0x91, 0x54, 0x06, 0xed, 0x07, 0xec, 0xbf,
	0xec, 0x61, 0xff, 0xb1, 0x20, 0xa9, 0x5b, 0x5c, 0xe5, 0xc9, 0xf2, 0xf9, 0x2e, 0x3c, 0x14, 0x8f,
	0x3f, 0x1a, 0x06, 0xa9, 0x92, 0x46, 0x7e, 0x95, 0x4a, 0x65, 0x96, 0x32, 0xe1, 0x52, 0x4f, 0x5c,
	0xe1, 0xec, 0x53, 0xe8, 0x5e, 0x8a, 0x1b, 0xd4, 0x46, 0x2a, 0x42, 0xe0, 0x5e, 0x96, 0xf1, 0x05,
	0xdd, 0x19, 0xed, 0x8c, 0x83, 0xd0, 0x3d, 0x9f, 0xfd, 0x0f, 0x10, 0xcc, 0x4a, 0x51, 0x1b, 0x83,
	0x7c, 0x06, 0x3d, 0x23, 0x0d, 0x4b, 0xa2, 0x1b, 0x96, 0x64, 0x48, 0x77, 0x47, 0x3b, 0xe3, 0x4e,
	0x08, 0xae, 0xf4, 0xa7, 0xad, 0x90, 0xc7, 0x00, 0x31, 0xd3, 0xeb, 0x02, 0xef, 0x38, 0x3c, 0xb0,
	0x15, 0x0f, 0x7f, 0x0e, 0x7d, 0xa6, 0x35, 0x1a, 0x5d, 0x10, 0xee, 0x39, 0x42, 0xcf, 0xd7, 0x3c,
	0xe5, 0x19, 0x04, 0xa9, 0xd4, 0xdc, 0x70, 0x29, 0x34, 0xdd, 0x1b, 0x75, 0xc6, 0xbd, 0xe7, 0xc1,
	0x64, 0x56, 0x54, 0xc2, 0x1a, 0x23, 0x13, 0xd8, 0x77, 0xba, 0x28, 0x4e, 0xec, 0xa7, 0xa6, 0xdd,
	0x82, 0x3c, 0x65, 0x06, 0x57, 0x52, 0xe5, 0xa1, 0x5f, 0x6b, 0xea, 0x61, 0xf2, 0x02, 0x0e, 0x3c,
	0x9f, 0x8b, 0x45, 0xa6, 0x8d, 0xe2, 0xa8, 0x69, 0xb0, 0x2d, 0x79, 0xe8, 0x28, 0x97, 0x15, 0x83,
	0xbc, 0x82, 0xe3, 0xc6, 0x2a, 0x91, 0x61, 0x6a, 0x85, 0x26, 0xd2, 0x46, 0xc6, 0xef, 0x34, 0x85,
	0xd1, 0xce, 0x78, 0x37, 0x1c, 0xd4, 0xcb, 0x5c, 0x39, 0x78, 0xee, 0x50, 0xf2, 0x12, 0x86, 0x2d,
	0x52, 0xfb, 0x32, 0x68, 0xcf, 0x09, 0x8f, 0xb6, 0x85, 0x53, 0xa6, 0xd7, 0x64, 0x0e, 0x4f, 0x8b,
	0x0e, 0xf3, 0x52, 0xc3, 0xc5, 0x52, 0xaa, 0x0d, 0xb3, 0xfb, 0x8e, 0x0c, 0xc6, 0x6b, 0x21, 0x13,
	0xb9, 0xca, 0x69, 0xdf, 0xb9, 0x3c, 0x29, 0xd9, 0xde, 0xe3, 0xb2, 0xe6, 0x5e, 0x55, 0x54, 0xf2,
	0x23, 0x9c, 0x6c, 0x9b, 0x2e, 0xb9, 0x60, 0x22, 0xe6, 0x2c, 0xd1, 0x74, 0xdf, 0x19, 0xd1, 0xdb,
	0x46, 0x6f, 0x2a, 0x9c, 0xbc, 0x80, 0xc1, 0xb6, 0x1a, 0x05, 0xaa, 0x55, 0x4e, 0x1f, 0xf8, 0x8d,
	0xdc, 0x56, 0xbe, 0x76, 0x18, 0xf9, 0x09, 0x4e, 0xb7, 0x55, 0x6b, 0x64, 0x89, 0x59, 0x47, 0x31,
	0x53, 0x48, 0x1f, 0xb6, 0x2d, 0xfa, 0x8b, 0x23, 0x4c, 0x99, 0x42, 0xf2, 0x3d, 0x1c, 0x6f, 0xcb,
	0x37, 0xcc, 0xa0, 0x72, 0x1d, 0x1f, 0x38, 0xf1, 0xf0, 0xb6, 0xf8, 0xb7, 0x12, 0x6e, 0xd3, 0x66,
	0x86, 0x27, 0xdc, 0xd8, 0x43, 0x3f, 0x6c, 0xd3, 0x5e, 0x97, 0x70, 0x5b, 0xdb, 0x0a, 0x59, 0x12,
	0xa1, 0x36, 0xcc, 0x20, 0x25, 0x6d, 0x6d, 0x87, 0xc8, 0x92, 0xd7, 0x0e, 0x6f, 0x3b, 0xbe, 0x58,
	0x0a, 0x9d, 0x6d, 0x50, 0x45, 0x0b, 0xae, 0x63, 0x85, 0xf6, 0x68, 0x98, 0xca, 0xe9, 0x27, 0x6d,
	0xc7, 0x37, 0x2d, 0xb8, 0xe7, 0x4d, 0x2a, 0xb9, 0x80, 0xd1, 0x9d, 0xa6, 0xda, 0xb0, 0x34, 0x41,
	0x4d, 0x8f, 0x9c, 0xdd, 0xe3, 0x76, 0xbb, 0xb9, 0x27, 0xb5, 0x77, 0xb7, 0xd9, 0x64, 0x82, 0xc7,
	0x7e, 0xbc, 0x34, 0xaa, 0x1b, 0x1e, 0xa3, 0xa6, 0x8f, 0xda, 0xbb, 0x6b, 0x70, 0xe7, 0x05, 0x95,
	0xfc, 0xfc, 0xe1, 0x1b, 0x2b, 0x7f, 0x63, 0xf6, 0xac, 0x06, 0xce, 0xe9, 0x78, 0x7b, 0x4c, 0x2b,
	0x02, 0x79, 0x02, 0xfb, 0x09, 0x5f, 0xa2, 0xe1, 0x1b, 0x8c, 0x56, 0x8c, 0x0b, 0x7a, 0xdf, 0xc5,
	0x42, 0xbf, 0x2c, 0x5e, 0x30, 0x2e, 0xc8, 0x77, 0x40, 0x6f, 0x91, 0xa2, 0x14, 0x55, 0x8c, 0xc2,
	0xb0, 0x15, 0xd2, 0x8f, 0xfd, 0xef, 0xb0, 0xc9, 0x9f, 0x55, 0x28, 0x19, 0x41, 0x5f, 0x0a, 0x8c,
	0x16, 0x2c, 0xf7, 0xee, 0x43, 0x9f, 0x5a, 0x52, 0xe0, 0x39, 0xcb, 0x9d, 0xf7, 0x4b, 0x18, 0x36,
	0x19, 0x4d, 0x6b, 0xea, 0x07, 0xbc, 0x26, 0xd7, 0xc6, 0x67, 0xff, 0x40, 0xb7, 0x0c, 0x0e, 0x9b,
	0x96, 0x82, 0x6d, 0xb0, 0x4c, 0x4b, 0xfb, 0x4c, 0xbe, 0x04, 0x12, 0x67, 0x4a, 0xa1, 0x30, 0x4d,
	0xc7, 0x5d, 0xe7, 0x78, 0x58, 0x20, 0x8d, 0x3e, 0xbf, 0x80, 0xc3, 0xe2, 0xed, 0x35, 0xd8, 0x1d,
	0xc7, 0x3e, 0xf0, 0x40, 0x63, 0xed, 0xff, 0xf6, 0xa0, 0x5b, 0xa6, 0xa2, 0x4d, 0x5d, 0x9f, 0x34,
	0x26, 0x4f, 0xcb, 0x16, 0x02, 0x57, 0xb9, 0xca, 0x53, 0xac, 0x61, 0x97, 0xe7, 0xbb, 0x0d, 0xf8,
	0xda, 0x86, 0x7a, 0x05, 0xbb, 0x0d, 0x74, 0x1a, 0xf0, 0xef, 0x76, 0x17, 0x65, 0x66, 0x47, 0x1a,
	0x63, 0x23, 0x95, 0xcb, 0xec, 0xa0, 0xc8, 0xec, 0xb9, 0x2b, 0xd9, 0x6b, 0xa1, 0x48, 0x3a, 0x99,
	0x48, 0x45, 0xf7, 0x1c, 0xc3, 0x9b, 0x4e, 0x6d, 0xc5, 0x6e, 0xcd, 0x13, 0x16, 0xa8, 0x63, 0xc5,
	0x53, 0xdb, 0xb5, 0x3b, 0xe5, 0x20, 0xf4, 0xa1, 0x7c, 0x5e, 0xd7, 0xeb, 0xc8, 0x4d, 0x95, 0x5c,
	0xf2, 0x04, 0xa3, 0x94, 0xc7, 0x26, 0x53, 0x18, 0x65, 0x2a, 0x71, 0x47, 0x1d, 0x14, 0x91, 0x3b,
	0xf3, 0xf8, 0xcc, 0xc3, 0xd7, 0x2a, 0x21, 0xcf, 0xc0, 0x07, 0x78, 0xb4, 0x94, 0x49, 0x22, 0xff,
	0xe6, 0x62, 0xe5, 0x62, 0xa6, 0x1b, 0x3e, 0x70, 0xe5, 0x37, 0x65, 0x95, 0x9c, 0x40, 0xf7, 0xaf,
	0x8c, 0x09, 0xc3, 0x4d, 0x4e, 0xbb, 0x6e, 0x1e, 0xaa, 0xef, 0xf6, 0x7d, 0x64, 0x82, 0xdb, 0xe5,
	0x79, 0x8c, 0x34, 0xf0, 0x77, 0x98, 0xad, 0xcc, 0x6c, 0x81, 0x1c, 0xc1, 0x9e, 0xbf, 0xbc, 0xc0,
	0x21, 0xfe, 0x0b, 0x39, 0x85, 0xe0, 0xad, 0x94, 0xef, 0xa2, 0x58, 0x6a, 0xe3, 0xe2, 0xbd, 0x13,
	0x76, 0x6d, 0x61, 0x2a, 0xb5, 0x21, 0xdf, 0xc2, 0xb0, 0x3e, 0xd2, 0x48, 0x2e, 0xa3, 0xea, 0x6a,
	0x2e, 0x32, 0xfc, 0x51, 0x0d, 0xff, 0xb1, 0xac, 0xaf, 0xe0, 0x53, 0x08, 0xdc, 0x3c, 0x26, 0x52,
	0xfb, 0x90, 0xee, 0x84, 0x5d, 0x5b, 0xf8, 0x55, 0x6a, 0x4d, 0xbe, 0x86, 0xa3, 0x0a, 0x6c, 0x4e,
	0x8c, 0x8f, 0x64, 0x52, 0xf2, 0x1a, 0x03, 0xf6, 0x0a, 0x8e, 0xcb, 0x31, 0x8f, 0xd7, 0x4c, 0xac,
	0xb0, 0x29, 0xf3, 0x89, 0x3a, 0xf0, 0x83, 0x3e, 0x75, 0x70, 0x43, 0xfa, 0x03, 0x9c, 0xa4, 0x0a,
	0x6f, 0xee, 0xd0, 0x16, 0x89, 0x6a, 0x19, 0x2d, 0xe2, 0xe7, 0xff, 0xee, 0x00, 0x54, 0x9b, 0xd2,
	0x64, 0x0c, 0xfd, 0x0b, 0x34, 0xf5, 0x2e, 0x61, 0x52, 0x3d, 0x9f, 0x34, 0x9e, 0xcf, 0x3e, 0x22,
	0x4f, 0xa1, 0x77, 0x61, 0xa3, 0xa2, 0xf8, 0xcf, 0x12, 0x4c, 0xca, 0xc7, 0x0f, 0x78, 0x30, 0x47,
	0xe3, 0x83, 0x45, 0xdf, 0xed, 0xf7, 0xf6, 0xbe, 0xfb, 0x1f, 0xf4, 0xcd, 0xfb, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x85, 0x7e, 0x0e, 0x72, 0x21, 0x09, 0x00, 0x00,
}
