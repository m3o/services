// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sms-verification.proto

package sms_verification

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SMSVerification service

type SMSVerificationService interface {
	Request(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error)
	Verify(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error)
	Get(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error)
}

type sMSVerificationService struct {
	c    client.Client
	name string
}

func NewSMSVerificationService(name string, c client.Client) SMSVerificationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "smsverification"
	}
	return &sMSVerificationService{
		c:    c,
		name: name,
	}
}

func (c *sMSVerificationService) Request(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error) {
	req := c.c.NewRequest(c.name, "SMSVerification.Request", in)
	out := new(Verification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSVerificationService) Verify(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error) {
	req := c.c.NewRequest(c.name, "SMSVerification.Verify", in)
	out := new(Verification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSVerificationService) Get(ctx context.Context, in *Verification, opts ...client.CallOption) (*Verification, error) {
	req := c.c.NewRequest(c.name, "SMSVerification.Get", in)
	out := new(Verification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMSVerification service

type SMSVerificationHandler interface {
	Request(context.Context, *Verification, *Verification) error
	Verify(context.Context, *Verification, *Verification) error
	Get(context.Context, *Verification, *Verification) error
}

func RegisterSMSVerificationHandler(s server.Server, hdlr SMSVerificationHandler, opts ...server.HandlerOption) error {
	type sMSVerification interface {
		Request(ctx context.Context, in *Verification, out *Verification) error
		Verify(ctx context.Context, in *Verification, out *Verification) error
		Get(ctx context.Context, in *Verification, out *Verification) error
	}
	type SMSVerification struct {
		sMSVerification
	}
	h := &sMSVerificationHandler{hdlr}
	return s.Handle(s.NewHandler(&SMSVerification{h}, opts...))
}

type sMSVerificationHandler struct {
	SMSVerificationHandler
}

func (h *sMSVerificationHandler) Request(ctx context.Context, in *Verification, out *Verification) error {
	return h.SMSVerificationHandler.Request(ctx, in, out)
}

func (h *sMSVerificationHandler) Verify(ctx context.Context, in *Verification, out *Verification) error {
	return h.SMSVerificationHandler.Verify(ctx, in, out)
}

func (h *sMSVerificationHandler) Get(ctx context.Context, in *Verification, out *Verification) error {
	return h.SMSVerificationHandler.Get(ctx, in, out)
}
