// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feeditems.proto

package feeditems

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FeedItems service

type FeedItemsService interface {
	Create(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error)
	BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...client.CallOption) (*Response, error)
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error)
}

type feedItemsService struct {
	c    client.Client
	name string
}

func NewFeedItemsService(name string, c client.Client) FeedItemsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "feeditems"
	}
	return &feedItemsService{
		c:    c,
		name: name,
	}
}

func (c *feedItemsService) Create(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedItems.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsService) Get(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedItems.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsService) Delete(ctx context.Context, in *FeedItem, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedItems.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsService) BulkDelete(ctx context.Context, in *BulkDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedItems.BulkDelete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedItemsService) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*GetFeedResponse, error) {
	req := c.c.NewRequest(c.name, "FeedItems.GetFeed", in)
	out := new(GetFeedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedItems service

type FeedItemsHandler interface {
	Create(context.Context, *FeedItem, *Response) error
	Get(context.Context, *FeedItem, *Response) error
	Delete(context.Context, *FeedItem, *Response) error
	BulkDelete(context.Context, *BulkDeleteRequest, *Response) error
	GetFeed(context.Context, *GetFeedRequest, *GetFeedResponse) error
}

func RegisterFeedItemsHandler(s server.Server, hdlr FeedItemsHandler, opts ...server.HandlerOption) error {
	type feedItems interface {
		Create(ctx context.Context, in *FeedItem, out *Response) error
		Get(ctx context.Context, in *FeedItem, out *Response) error
		Delete(ctx context.Context, in *FeedItem, out *Response) error
		BulkDelete(ctx context.Context, in *BulkDeleteRequest, out *Response) error
		GetFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error
	}
	type FeedItems struct {
		feedItems
	}
	h := &feedItemsHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedItems{h}, opts...))
}

type feedItemsHandler struct {
	FeedItemsHandler
}

func (h *feedItemsHandler) Create(ctx context.Context, in *FeedItem, out *Response) error {
	return h.FeedItemsHandler.Create(ctx, in, out)
}

func (h *feedItemsHandler) Get(ctx context.Context, in *FeedItem, out *Response) error {
	return h.FeedItemsHandler.Get(ctx, in, out)
}

func (h *feedItemsHandler) Delete(ctx context.Context, in *FeedItem, out *Response) error {
	return h.FeedItemsHandler.Delete(ctx, in, out)
}

func (h *feedItemsHandler) BulkDelete(ctx context.Context, in *BulkDeleteRequest, out *Response) error {
	return h.FeedItemsHandler.BulkDelete(ctx, in, out)
}

func (h *feedItemsHandler) GetFeed(ctx context.Context, in *GetFeedRequest, out *GetFeedResponse) error {
	return h.FeedItemsHandler.GetFeed(ctx, in, out)
}
