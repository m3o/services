// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/followers.proto

package followers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Followers service

type FollowersService interface {
	Get(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error)
	Count(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error)
	Follow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Unfollow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// List is depricated due to an insufficiently descriptive name. Use
	// ListRelationships instead.
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	// ListRelationships checks if a resource follows other resources, e.g.
	// which of these stocks does a user follow.
	ListRelationships(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type followersService struct {
	c    client.Client
	name string
}

func NewFollowersService(name string, c client.Client) FollowersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "followers"
	}
	return &followersService{
		c:    c,
		name: name,
	}
}

func (c *followersService) Get(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Followers.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersService) Count(ctx context.Context, in *Resource, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Followers.Count", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersService) Follow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Followers.Follow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersService) Unfollow(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Followers.Unfollow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Followers.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersService) ListRelationships(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Followers.ListRelationships", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Followers service

type FollowersHandler interface {
	Get(context.Context, *Resource, *Response) error
	Count(context.Context, *Resource, *Response) error
	Follow(context.Context, *Request, *Response) error
	Unfollow(context.Context, *Request, *Response) error
	// List is depricated due to an insufficiently descriptive name. Use
	// ListRelationships instead.
	List(context.Context, *ListRequest, *ListResponse) error
	// ListRelationships checks if a resource follows other resources, e.g.
	// which of these stocks does a user follow.
	ListRelationships(context.Context, *ListRequest, *ListResponse) error
}

func RegisterFollowersHandler(s server.Server, hdlr FollowersHandler, opts ...server.HandlerOption) error {
	type followers interface {
		Get(ctx context.Context, in *Resource, out *Response) error
		Count(ctx context.Context, in *Resource, out *Response) error
		Follow(ctx context.Context, in *Request, out *Response) error
		Unfollow(ctx context.Context, in *Request, out *Response) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		ListRelationships(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type Followers struct {
		followers
	}
	h := &followersHandler{hdlr}
	return s.Handle(s.NewHandler(&Followers{h}, opts...))
}

type followersHandler struct {
	FollowersHandler
}

func (h *followersHandler) Get(ctx context.Context, in *Resource, out *Response) error {
	return h.FollowersHandler.Get(ctx, in, out)
}

func (h *followersHandler) Count(ctx context.Context, in *Resource, out *Response) error {
	return h.FollowersHandler.Count(ctx, in, out)
}

func (h *followersHandler) Follow(ctx context.Context, in *Request, out *Response) error {
	return h.FollowersHandler.Follow(ctx, in, out)
}

func (h *followersHandler) Unfollow(ctx context.Context, in *Request, out *Response) error {
	return h.FollowersHandler.Unfollow(ctx, in, out)
}

func (h *followersHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.FollowersHandler.List(ctx, in, out)
}

func (h *followersHandler) ListRelationships(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.FollowersHandler.ListRelationships(ctx, in, out)
}
