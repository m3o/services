// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/trades.proto

package trades

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Trades service

type TradesService interface {
	CreateTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error)
	GetTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error)
	SetTradeMetadata(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error)
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...client.CallOption) (*ListTradesResponse, error)
	ListTradesForPosition(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	ListTradesForPortfolio(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	ListPositionsForPortfolio(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	ListPositions(ctx context.Context, in *BulkListRequest, opts ...client.CallOption) (*ListResponse, error)
	AllAssets(ctx context.Context, in *AllAssetsRequest, opts ...client.CallOption) (*AllAssetsResponse, error)
}

type tradesService struct {
	c    client.Client
	name string
}

func NewTradesService(name string, c client.Client) TradesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "trades"
	}
	return &tradesService{
		c:    c,
		name: name,
	}
}

func (c *tradesService) CreateTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error) {
	req := c.c.NewRequest(c.name, "Trades.CreateTrade", in)
	out := new(Trade)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) GetTrade(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error) {
	req := c.c.NewRequest(c.name, "Trades.GetTrade", in)
	out := new(Trade)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) SetTradeMetadata(ctx context.Context, in *Trade, opts ...client.CallOption) (*Trade, error) {
	req := c.c.NewRequest(c.name, "Trades.SetTradeMetadata", in)
	out := new(Trade)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...client.CallOption) (*ListTradesResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.ListTrades", in)
	out := new(ListTradesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) ListTradesForPosition(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.ListTradesForPosition", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) ListTradesForPortfolio(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.ListTradesForPortfolio", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) ListPositionsForPortfolio(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.ListPositionsForPortfolio", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) ListPositions(ctx context.Context, in *BulkListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.ListPositions", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) AllAssets(ctx context.Context, in *AllAssetsRequest, opts ...client.CallOption) (*AllAssetsResponse, error) {
	req := c.c.NewRequest(c.name, "Trades.AllAssets", in)
	out := new(AllAssetsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trades service

type TradesHandler interface {
	CreateTrade(context.Context, *Trade, *Trade) error
	GetTrade(context.Context, *Trade, *Trade) error
	SetTradeMetadata(context.Context, *Trade, *Trade) error
	ListTrades(context.Context, *ListTradesRequest, *ListTradesResponse) error
	ListTradesForPosition(context.Context, *ListRequest, *ListResponse) error
	ListTradesForPortfolio(context.Context, *ListRequest, *ListResponse) error
	ListPositionsForPortfolio(context.Context, *ListRequest, *ListResponse) error
	ListPositions(context.Context, *BulkListRequest, *ListResponse) error
	AllAssets(context.Context, *AllAssetsRequest, *AllAssetsResponse) error
}

func RegisterTradesHandler(s server.Server, hdlr TradesHandler, opts ...server.HandlerOption) error {
	type trades interface {
		CreateTrade(ctx context.Context, in *Trade, out *Trade) error
		GetTrade(ctx context.Context, in *Trade, out *Trade) error
		SetTradeMetadata(ctx context.Context, in *Trade, out *Trade) error
		ListTrades(ctx context.Context, in *ListTradesRequest, out *ListTradesResponse) error
		ListTradesForPosition(ctx context.Context, in *ListRequest, out *ListResponse) error
		ListTradesForPortfolio(ctx context.Context, in *ListRequest, out *ListResponse) error
		ListPositionsForPortfolio(ctx context.Context, in *ListRequest, out *ListResponse) error
		ListPositions(ctx context.Context, in *BulkListRequest, out *ListResponse) error
		AllAssets(ctx context.Context, in *AllAssetsRequest, out *AllAssetsResponse) error
	}
	type Trades struct {
		trades
	}
	h := &tradesHandler{hdlr}
	return s.Handle(s.NewHandler(&Trades{h}, opts...))
}

type tradesHandler struct {
	TradesHandler
}

func (h *tradesHandler) CreateTrade(ctx context.Context, in *Trade, out *Trade) error {
	return h.TradesHandler.CreateTrade(ctx, in, out)
}

func (h *tradesHandler) GetTrade(ctx context.Context, in *Trade, out *Trade) error {
	return h.TradesHandler.GetTrade(ctx, in, out)
}

func (h *tradesHandler) SetTradeMetadata(ctx context.Context, in *Trade, out *Trade) error {
	return h.TradesHandler.SetTradeMetadata(ctx, in, out)
}

func (h *tradesHandler) ListTrades(ctx context.Context, in *ListTradesRequest, out *ListTradesResponse) error {
	return h.TradesHandler.ListTrades(ctx, in, out)
}

func (h *tradesHandler) ListTradesForPosition(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.TradesHandler.ListTradesForPosition(ctx, in, out)
}

func (h *tradesHandler) ListTradesForPortfolio(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.TradesHandler.ListTradesForPortfolio(ctx, in, out)
}

func (h *tradesHandler) ListPositionsForPortfolio(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.TradesHandler.ListPositionsForPortfolio(ctx, in, out)
}

func (h *tradesHandler) ListPositions(ctx context.Context, in *BulkListRequest, out *ListResponse) error {
	return h.TradesHandler.ListPositions(ctx, in, out)
}

func (h *tradesHandler) AllAssets(ctx context.Context, in *AllAssetsRequest, out *AllAssetsResponse) error {
	return h.TradesHandler.AllAssets(ctx, in, out)
}
