// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/welcome.proto

package welcome

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Welcome service

type WelcomeService interface {
	RequestDownloadLink(ctx context.Context, in *RequestDownload, opts ...client.CallOption) (*RequestDownload, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error)
	RequestSMSCode(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	ValidateSMSCode(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	CreateProfile(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	FindFriends(ctx context.Context, in *FindFriendsRequest, opts ...client.CallOption) (*FindFriendsResponse, error)
}

type welcomeService struct {
	c    client.Client
	name string
}

func NewWelcomeService(name string, c client.Client) WelcomeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "welcome"
	}
	return &welcomeService{
		c:    c,
		name: name,
	}
}

func (c *welcomeService) RequestDownloadLink(ctx context.Context, in *RequestDownload, opts ...client.CallOption) (*RequestDownload, error) {
	req := c.c.NewRequest(c.name, "Welcome.RequestDownloadLink", in)
	out := new(RequestDownload)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeService) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...client.CallOption) (*GetConfigResponse, error) {
	req := c.c.NewRequest(c.name, "Welcome.GetConfig", in)
	out := new(GetConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeService) RequestSMSCode(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Welcome.RequestSMSCode", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeService) ValidateSMSCode(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "Welcome.ValidateSMSCode", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeService) CreateProfile(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Welcome.CreateProfile", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *welcomeService) FindFriends(ctx context.Context, in *FindFriendsRequest, opts ...client.CallOption) (*FindFriendsResponse, error) {
	req := c.c.NewRequest(c.name, "Welcome.FindFriends", in)
	out := new(FindFriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Welcome service

type WelcomeHandler interface {
	RequestDownloadLink(context.Context, *RequestDownload, *RequestDownload) error
	GetConfig(context.Context, *GetConfigRequest, *GetConfigResponse) error
	RequestSMSCode(context.Context, *AuthRequest, *AuthResponse) error
	ValidateSMSCode(context.Context, *AuthRequest, *AuthResponse) error
	CreateProfile(context.Context, *User, *User) error
	FindFriends(context.Context, *FindFriendsRequest, *FindFriendsResponse) error
}

func RegisterWelcomeHandler(s server.Server, hdlr WelcomeHandler, opts ...server.HandlerOption) error {
	type welcome interface {
		RequestDownloadLink(ctx context.Context, in *RequestDownload, out *RequestDownload) error
		GetConfig(ctx context.Context, in *GetConfigRequest, out *GetConfigResponse) error
		RequestSMSCode(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		ValidateSMSCode(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		CreateProfile(ctx context.Context, in *User, out *User) error
		FindFriends(ctx context.Context, in *FindFriendsRequest, out *FindFriendsResponse) error
	}
	type Welcome struct {
		welcome
	}
	h := &welcomeHandler{hdlr}
	return s.Handle(s.NewHandler(&Welcome{h}, opts...))
}

type welcomeHandler struct {
	WelcomeHandler
}

func (h *welcomeHandler) RequestDownloadLink(ctx context.Context, in *RequestDownload, out *RequestDownload) error {
	return h.WelcomeHandler.RequestDownloadLink(ctx, in, out)
}

func (h *welcomeHandler) GetConfig(ctx context.Context, in *GetConfigRequest, out *GetConfigResponse) error {
	return h.WelcomeHandler.GetConfig(ctx, in, out)
}

func (h *welcomeHandler) RequestSMSCode(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.WelcomeHandler.RequestSMSCode(ctx, in, out)
}

func (h *welcomeHandler) ValidateSMSCode(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.WelcomeHandler.ValidateSMSCode(ctx, in, out)
}

func (h *welcomeHandler) CreateProfile(ctx context.Context, in *User, out *User) error {
	return h.WelcomeHandler.CreateProfile(ctx, in, out)
}

func (h *welcomeHandler) FindFriends(ctx context.Context, in *FindFriendsRequest, out *FindFriendsResponse) error {
	return h.WelcomeHandler.FindFriends(ctx, in, out)
}
