// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	mock "github.com/stretchr/testify/mock"

	subscriptions "github.com/m3o/services/subscriptions/proto"
)

// SubscriptionsService is an autogenerated mock type for the SubscriptionsService type
type SubscriptionsService struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionsService) AddUser(ctx context.Context, in *subscriptions.AddUserRequest, opts ...client.CallOption) (*subscriptions.AddUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subscriptions.AddUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.AddUserRequest, ...client.CallOption) *subscriptions.AddUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.AddUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subscriptions.AddUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionsService) Cancel(ctx context.Context, in *subscriptions.CancelRequest, opts ...client.CallOption) (*subscriptions.CancelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subscriptions.CancelResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.CancelRequest, ...client.CallOption) *subscriptions.CancelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.CancelResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subscriptions.CancelRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionsService) Create(ctx context.Context, in *subscriptions.CreateRequest, opts ...client.CallOption) (*subscriptions.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subscriptions.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.CreateRequest, ...client.CallOption) *subscriptions.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subscriptions.CreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionsService) Update(ctx context.Context, in *subscriptions.UpdateRequest, opts ...client.CallOption) (*subscriptions.UpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subscriptions.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.UpdateRequest, ...client.CallOption) *subscriptions.UpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subscriptions.UpdateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
