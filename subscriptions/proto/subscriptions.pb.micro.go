// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/subscriptions.proto

package subscriptions

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Subscriptions service

func NewSubscriptionsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Subscriptions service

type SubscriptionsService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type subscriptionsService struct {
	c    client.Client
	name string
}

func NewSubscriptionsService(name string, c client.Client) SubscriptionsService {
	return &subscriptionsService{
		c:    c,
		name: name,
	}
}

func (c *subscriptionsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "Subscriptions.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsService) Cancel(ctx context.Context, in *CancelRequest, opts ...client.CallOption) (*CancelResponse, error) {
	req := c.c.NewRequest(c.name, "Subscriptions.Cancel", in)
	out := new(CancelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Subscriptions.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscriptions service

type SubscriptionsHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Cancel(context.Context, *CancelRequest, *CancelResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterSubscriptionsHandler(s server.Server, hdlr SubscriptionsHandler, opts ...server.HandlerOption) error {
	type subscriptions interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Cancel(ctx context.Context, in *CancelRequest, out *CancelResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type Subscriptions struct {
		subscriptions
	}
	h := &subscriptionsHandler{hdlr}
	return s.Handle(s.NewHandler(&Subscriptions{h}, opts...))
}

type subscriptionsHandler struct {
	SubscriptionsHandler
}

func (h *subscriptionsHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.SubscriptionsHandler.Create(ctx, in, out)
}

func (h *subscriptionsHandler) Cancel(ctx context.Context, in *CancelRequest, out *CancelResponse) error {
	return h.SubscriptionsHandler.Cancel(ctx, in, out)
}

func (h *subscriptionsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.SubscriptionsHandler.List(ctx, in, out)
}
