// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/provider.proto

package go_micro_srv_provider

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Provider service

type ProviderService interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CreateCustomerResponse, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error)
}

type providerService struct {
	c    client.Client
	name string
}

func NewProviderService(name string, c client.Client) ProviderService {
	return &providerService{
		c:    c,
		name: name,
	}
}

func (c *providerService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...client.CallOption) (*CreatePlanResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreatePlan", in)
	out := new(CreatePlanResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...client.CallOption) (*CreateCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateCustomer", in)
	out := new(CreateCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerService) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...client.CallOption) (*CreateSubscriptionResponse, error) {
	req := c.c.NewRequest(c.name, "Provider.CreateSubscription", in)
	out := new(CreateSubscriptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Provider service

type ProviderHandler interface {
	CreateProduct(context.Context, *CreateProductRequest, *CreateProductResponse) error
	CreatePlan(context.Context, *CreatePlanRequest, *CreatePlanResponse) error
	CreateCustomer(context.Context, *CreateCustomerRequest, *CreateCustomerResponse) error
	CreateSubscription(context.Context, *CreateSubscriptionRequest, *CreateSubscriptionResponse) error
}

func RegisterProviderHandler(s server.Server, hdlr ProviderHandler, opts ...server.HandlerOption) error {
	type provider interface {
		CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error
		CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error
		CreateCustomer(ctx context.Context, in *CreateCustomerRequest, out *CreateCustomerResponse) error
		CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error
	}
	type Provider struct {
		provider
	}
	h := &providerHandler{hdlr}
	return s.Handle(s.NewHandler(&Provider{h}, opts...))
}

type providerHandler struct {
	ProviderHandler
}

func (h *providerHandler) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.ProviderHandler.CreateProduct(ctx, in, out)
}

func (h *providerHandler) CreatePlan(ctx context.Context, in *CreatePlanRequest, out *CreatePlanResponse) error {
	return h.ProviderHandler.CreatePlan(ctx, in, out)
}

func (h *providerHandler) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, out *CreateCustomerResponse) error {
	return h.ProviderHandler.CreateCustomer(ctx, in, out)
}

func (h *providerHandler) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, out *CreateSubscriptionResponse) error {
	return h.ProviderHandler.CreateSubscription(ctx, in, out)
}
