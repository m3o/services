// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	go_micro_srv_provider "github.com/m3o/services/payments/proto"

	mock "github.com/stretchr/testify/mock"
)

// ProviderService is an autogenerated mock type for the ProviderService type
type ProviderService struct {
	mock.Mock
}

// CancelSubscription provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CancelSubscription(ctx context.Context, in *go_micro_srv_provider.CancelSubscriptionRequest, opts ...client.CallOption) (*go_micro_srv_provider.CancelSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CancelSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CancelSubscriptionRequest, ...client.CallOption) *go_micro_srv_provider.CancelSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CancelSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CancelSubscriptionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomer provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CreateCustomer(ctx context.Context, in *go_micro_srv_provider.CreateCustomerRequest, opts ...client.CallOption) (*go_micro_srv_provider.CreateCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CreateCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CreateCustomerRequest, ...client.CallOption) *go_micro_srv_provider.CreateCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CreateCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CreateCustomerRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CreatePaymentMethod(ctx context.Context, in *go_micro_srv_provider.CreatePaymentMethodRequest, opts ...client.CallOption) (*go_micro_srv_provider.CreatePaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CreatePaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CreatePaymentMethodRequest, ...client.CallOption) *go_micro_srv_provider.CreatePaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CreatePaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CreatePaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlan provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CreatePlan(ctx context.Context, in *go_micro_srv_provider.CreatePlanRequest, opts ...client.CallOption) (*go_micro_srv_provider.CreatePlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CreatePlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CreatePlanRequest, ...client.CallOption) *go_micro_srv_provider.CreatePlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CreatePlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CreatePlanRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CreateProduct(ctx context.Context, in *go_micro_srv_provider.CreateProductRequest, opts ...client.CallOption) (*go_micro_srv_provider.CreateProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CreateProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CreateProductRequest, ...client.CallOption) *go_micro_srv_provider.CreateProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CreateProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CreateProductRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) CreateSubscription(ctx context.Context, in *go_micro_srv_provider.CreateSubscriptionRequest, opts ...client.CallOption) (*go_micro_srv_provider.CreateSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.CreateSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.CreateSubscriptionRequest, ...client.CallOption) *go_micro_srv_provider.CreateSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.CreateSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.CreateSubscriptionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) DeleteCustomer(ctx context.Context, in *go_micro_srv_provider.DeleteCustomerRequest, opts ...client.CallOption) (*go_micro_srv_provider.DeleteCustomerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.DeleteCustomerResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.DeleteCustomerRequest, ...client.CallOption) *go_micro_srv_provider.DeleteCustomerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.DeleteCustomerResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.DeleteCustomerRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) DeletePaymentMethod(ctx context.Context, in *go_micro_srv_provider.DeletePaymentMethodRequest, opts ...client.CallOption) (*go_micro_srv_provider.DeletePaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.DeletePaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.DeletePaymentMethodRequest, ...client.CallOption) *go_micro_srv_provider.DeletePaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.DeletePaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.DeletePaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProviderID provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) GetProviderID(ctx context.Context, in *go_micro_srv_provider.GetProviderIDRequest, opts ...client.CallOption) (*go_micro_srv_provider.GetProviderIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.GetProviderIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.GetProviderIDRequest, ...client.CallOption) *go_micro_srv_provider.GetProviderIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.GetProviderIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.GetProviderIDRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPaymentMethods provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) ListPaymentMethods(ctx context.Context, in *go_micro_srv_provider.ListPaymentMethodsRequest, opts ...client.CallOption) (*go_micro_srv_provider.ListPaymentMethodsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.ListPaymentMethodsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.ListPaymentMethodsRequest, ...client.CallOption) *go_micro_srv_provider.ListPaymentMethodsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.ListPaymentMethodsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.ListPaymentMethodsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlans provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) ListPlans(ctx context.Context, in *go_micro_srv_provider.ListPlansRequest, opts ...client.CallOption) (*go_micro_srv_provider.ListPlansResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.ListPlansResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.ListPlansRequest, ...client.CallOption) *go_micro_srv_provider.ListPlansResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.ListPlansResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.ListPlansRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) ListSubscriptions(ctx context.Context, in *go_micro_srv_provider.ListSubscriptionsRequest, opts ...client.CallOption) (*go_micro_srv_provider.ListSubscriptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.ListSubscriptionsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.ListSubscriptionsRequest, ...client.CallOption) *go_micro_srv_provider.ListSubscriptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.ListSubscriptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.ListSubscriptionsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) SetDefaultPaymentMethod(ctx context.Context, in *go_micro_srv_provider.SetDefaultPaymentMethodRequest, opts ...client.CallOption) (*go_micro_srv_provider.SetDefaultPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.SetDefaultPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.SetDefaultPaymentMethodRequest, ...client.CallOption) *go_micro_srv_provider.SetDefaultPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.SetDefaultPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.SetDefaultPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) UpdateSubscription(ctx context.Context, in *go_micro_srv_provider.UpdateSubscriptionRequest, opts ...client.CallOption) (*go_micro_srv_provider.UpdateSubscriptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.UpdateSubscriptionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.UpdateSubscriptionRequest, ...client.CallOption) *go_micro_srv_provider.UpdateSubscriptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.UpdateSubscriptionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.UpdateSubscriptionRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *ProviderService) VerifyPaymentMethod(ctx context.Context, in *go_micro_srv_provider.VerifyPaymentMethodRequest, opts ...client.CallOption) (*go_micro_srv_provider.VerifyPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_srv_provider.VerifyPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_srv_provider.VerifyPaymentMethodRequest, ...client.CallOption) *go_micro_srv_provider.VerifyPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_srv_provider.VerifyPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_srv_provider.VerifyPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
