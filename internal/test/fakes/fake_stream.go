// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/micro/micro/v3/service/events"
)

type FakeStream struct {
	ConsumeStub        func(string, ...events.ConsumeOption) (<-chan events.Event, error)
	consumeMutex       sync.RWMutex
	consumeArgsForCall []struct {
		arg1 string
		arg2 []events.ConsumeOption
	}
	consumeReturns struct {
		result1 <-chan events.Event
		result2 error
	}
	consumeReturnsOnCall map[int]struct {
		result1 <-chan events.Event
		result2 error
	}
	PublishStub        func(string, interface{}, ...events.PublishOption) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 string
		arg2 interface{}
		arg3 []events.PublishOption
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStream) Consume(arg1 string, arg2 ...events.ConsumeOption) (<-chan events.Event, error) {
	fake.consumeMutex.Lock()
	ret, specificReturn := fake.consumeReturnsOnCall[len(fake.consumeArgsForCall)]
	fake.consumeArgsForCall = append(fake.consumeArgsForCall, struct {
		arg1 string
		arg2 []events.ConsumeOption
	}{arg1, arg2})
	stub := fake.ConsumeStub
	fakeReturns := fake.consumeReturns
	fake.recordInvocation("Consume", []interface{}{arg1, arg2})
	fake.consumeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStream) ConsumeCallCount() int {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	return len(fake.consumeArgsForCall)
}

func (fake *FakeStream) ConsumeCalls(stub func(string, ...events.ConsumeOption) (<-chan events.Event, error)) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = stub
}

func (fake *FakeStream) ConsumeArgsForCall(i int) (string, []events.ConsumeOption) {
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	argsForCall := fake.consumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStream) ConsumeReturns(result1 <-chan events.Event, result2 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	fake.consumeReturns = struct {
		result1 <-chan events.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeStream) ConsumeReturnsOnCall(i int, result1 <-chan events.Event, result2 error) {
	fake.consumeMutex.Lock()
	defer fake.consumeMutex.Unlock()
	fake.ConsumeStub = nil
	if fake.consumeReturnsOnCall == nil {
		fake.consumeReturnsOnCall = make(map[int]struct {
			result1 <-chan events.Event
			result2 error
		})
	}
	fake.consumeReturnsOnCall[i] = struct {
		result1 <-chan events.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeStream) Publish(arg1 string, arg2 interface{}, arg3 ...events.PublishOption) error {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 string
		arg2 interface{}
		arg3 []events.PublishOption
	}{arg1, arg2, arg3})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStream) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeStream) PublishCalls(stub func(string, interface{}, ...events.PublishOption) error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeStream) PublishArgsForCall(i int) (string, interface{}, []events.PublishOption) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStream) PublishReturns(result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStream) PublishReturnsOnCall(i int, result1 error) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStream) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.consumeMutex.RLock()
	defer fake.consumeMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStream) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.Stream = new(FakeStream)
