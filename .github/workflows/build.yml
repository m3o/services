name: Build

on: 
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Detect which services changed
      id: services_changed
      uses: micro/actions@1.0.0
      with:
        githubToken: ${{ secrets.GITHUB_TOKEN }}
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Build Started Webhook
      run: |
        ./event.sh "build.started" "${GITHUB_SHA}" "${GITHUB_REPOSITORY}"
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
    - name: Setup go-mod cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-gomods-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-gomods-
    - name: Build services with changes
      run: |
        services=(${{ steps.services_changed.outputs.services }})
        for dir in "${services[@]}"; do
          cd $dir
          echo Building $dir
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" .
          cd ..
        done
    - name: Setup dumb init
      run: |
        git clone https://github.com/Yelp/dumb-init.git
        cd dumb-init
        make build
        cd ..
    - name: Build and push docker images
      run: |
        mkdir tmp
        cp dumb-init/dumb-init tmp/dumb-init

        echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin docker.pkg.github.com

        services=(${{ steps.services_changed.outputs.services }})
        for srv in "${services[@]}"; do
          cp $srv/$srv tmp/app
          tag=docker.pkg.github.com/${{ github.repository }}/$srv
          docker build tmp -f .github/workflows/Dockerfile -t $tag
          docker push $tag
          rm tmp/app
        done
    - name: Build Finished Webhook
      run: |
        ./event.sh "build.finished" "${GITHUB_SHA}" "${GITHUB_REPOSITORY}"
    - name: Build Failed Webhook
      if: failure()
      run: |
        ./event.sh "build.failed" "${GITHUB_SHA}" "${GITHUB_REPOSITORY}"
