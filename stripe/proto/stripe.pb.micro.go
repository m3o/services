// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/stripe.proto

package stripe

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Stripe service

func NewStripeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Stripe service

type StripeService interface {
	IncrementCustomerBalance(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*IncrementResponse, error)
	DecrementCustomerBalance(ctx context.Context, in *DecrementRequest, opts ...client.CallOption) (*DecrementResponse, error)
}

type stripeService struct {
	c    client.Client
	name string
}

func NewStripeService(name string, c client.Client) StripeService {
	return &stripeService{
		c:    c,
		name: name,
	}
}

func (c *stripeService) IncrementCustomerBalance(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*IncrementResponse, error) {
	req := c.c.NewRequest(c.name, "Stripe.IncrementCustomerBalance", in)
	out := new(IncrementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stripeService) DecrementCustomerBalance(ctx context.Context, in *DecrementRequest, opts ...client.CallOption) (*DecrementResponse, error) {
	req := c.c.NewRequest(c.name, "Stripe.DecrementCustomerBalance", in)
	out := new(DecrementResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stripe service

type StripeHandler interface {
	IncrementCustomerBalance(context.Context, *IncrementRequest, *IncrementResponse) error
	DecrementCustomerBalance(context.Context, *DecrementRequest, *DecrementResponse) error
}

func RegisterStripeHandler(s server.Server, hdlr StripeHandler, opts ...server.HandlerOption) error {
	type stripe interface {
		IncrementCustomerBalance(ctx context.Context, in *IncrementRequest, out *IncrementResponse) error
		DecrementCustomerBalance(ctx context.Context, in *DecrementRequest, out *DecrementResponse) error
	}
	type Stripe struct {
		stripe
	}
	h := &stripeHandler{hdlr}
	return s.Handle(s.NewHandler(&Stripe{h}, opts...))
}

type stripeHandler struct {
	StripeHandler
}

func (h *stripeHandler) IncrementCustomerBalance(ctx context.Context, in *IncrementRequest, out *IncrementResponse) error {
	return h.StripeHandler.IncrementCustomerBalance(ctx, in, out)
}

func (h *stripeHandler) DecrementCustomerBalance(ctx context.Context, in *DecrementRequest, out *DecrementResponse) error {
	return h.StripeHandler.DecrementCustomerBalance(ctx, in, out)
}
