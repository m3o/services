// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	customers "github.com/m3o/services/customers/proto"

	mock "github.com/stretchr/testify/mock"
)

// CustomersService is an autogenerated mock type for the CustomersService type
type CustomersService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *CustomersService) Create(ctx context.Context, in *customers.CreateRequest, opts ...client.CallOption) (*customers.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customers.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customers.CreateRequest, ...client.CallOption) *customers.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customers.CreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *CustomersService) Delete(ctx context.Context, in *customers.DeleteRequest, opts ...client.CallOption) (*customers.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customers.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customers.DeleteRequest, ...client.CallOption) *customers.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customers.DeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkVerified provides a mock function with given fields: ctx, in, opts
func (_m *CustomersService) MarkVerified(ctx context.Context, in *customers.MarkVerifiedRequest, opts ...client.CallOption) (*customers.MarkVerifiedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customers.MarkVerifiedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customers.MarkVerifiedRequest, ...client.CallOption) *customers.MarkVerifiedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.MarkVerifiedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customers.MarkVerifiedRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in, opts
func (_m *CustomersService) Read(ctx context.Context, in *customers.ReadRequest, opts ...client.CallOption) (*customers.ReadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *customers.ReadResponse
	if rf, ok := ret.Get(0).(func(context.Context, *customers.ReadRequest, ...client.CallOption) *customers.ReadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customers.ReadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *customers.ReadRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
