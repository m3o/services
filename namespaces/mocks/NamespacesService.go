// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	mock "github.com/stretchr/testify/mock"

	namespaces "github.com/m3o/services/namespaces/proto"
)

// NamespacesService is an autogenerated mock type for the NamespacesService type
type NamespacesService struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) AddUser(ctx context.Context, in *namespaces.AddUserRequest, opts ...client.CallOption) (*namespaces.AddUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.AddUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.AddUserRequest, ...client.CallOption) *namespaces.AddUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.AddUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.AddUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) Create(ctx context.Context, in *namespaces.CreateRequest, opts ...client.CallOption) (*namespaces.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.CreateRequest, ...client.CallOption) *namespaces.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.CreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) Delete(ctx context.Context, in *namespaces.DeleteRequest, opts ...client.CallOption) (*namespaces.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.DeleteRequest, ...client.CallOption) *namespaces.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.DeleteRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) List(ctx context.Context, in *namespaces.ListRequest, opts ...client.CallOption) (*namespaces.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.ListRequest, ...client.CallOption) *namespaces.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.ListRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) Read(ctx context.Context, in *namespaces.ReadRequest, opts ...client.CallOption) (*namespaces.ReadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.ReadResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.ReadRequest, ...client.CallOption) *namespaces.ReadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.ReadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.ReadRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: ctx, in, opts
func (_m *NamespacesService) RemoveUser(ctx context.Context, in *namespaces.RemoveUserRequest, opts ...client.CallOption) (*namespaces.RemoveUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *namespaces.RemoveUserResponse
	if rf, ok := ret.Get(0).(func(context.Context, *namespaces.RemoveUserRequest, ...client.CallOption) *namespaces.RemoveUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespaces.RemoveUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *namespaces.RemoveUserRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
