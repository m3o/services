// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/services/project/service/proto/project.proto

package go_micro_service_project

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProjectService service

func NewProjectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProjectService service

type ProjectService interface {
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error)
	ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...client.CallOption) (*ListMembershipsResponse, error)
}

type projectService struct {
	c    client.Client
	name string
}

func NewProjectService(name string, c client.Client) ProjectService {
	return &projectService{
		c:    c,
		name: name,
	}
}

func (c *projectService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.AddMember", in)
	out := new(AddMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...client.CallOption) (*RemoveMemberResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.RemoveMember", in)
	out := new(RemoveMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectService) ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...client.CallOption) (*ListMembershipsResponse, error) {
	req := c.c.NewRequest(c.name, "ProjectService.ListMemberships", in)
	out := new(ListMembershipsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectService service

type ProjectServiceHandler interface {
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	AddMember(context.Context, *AddMemberRequest, *AddMemberResponse) error
	RemoveMember(context.Context, *RemoveMemberRequest, *RemoveMemberResponse) error
	ListMemberships(context.Context, *ListMembershipsRequest, *ListMembershipsResponse) error
}

func RegisterProjectServiceHandler(s server.Server, hdlr ProjectServiceHandler, opts ...server.HandlerOption) error {
	type projectService interface {
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error
		RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error
		ListMemberships(ctx context.Context, in *ListMembershipsRequest, out *ListMembershipsResponse) error
	}
	type ProjectService struct {
		projectService
	}
	h := &projectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProjectService{h}, opts...))
}

type projectServiceHandler struct {
	ProjectServiceHandler
}

func (h *projectServiceHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ProjectServiceHandler.Read(ctx, in, out)
}

func (h *projectServiceHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ProjectServiceHandler.Create(ctx, in, out)
}

func (h *projectServiceHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ProjectServiceHandler.Update(ctx, in, out)
}

func (h *projectServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ProjectServiceHandler.List(ctx, in, out)
}

func (h *projectServiceHandler) AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error {
	return h.ProjectServiceHandler.AddMember(ctx, in, out)
}

func (h *projectServiceHandler) RemoveMember(ctx context.Context, in *RemoveMemberRequest, out *RemoveMemberResponse) error {
	return h.ProjectServiceHandler.RemoveMember(ctx, in, out)
}

func (h *projectServiceHandler) ListMemberships(ctx context.Context, in *ListMembershipsRequest, out *ListMembershipsResponse) error {
	return h.ProjectServiceHandler.ListMemberships(ctx, in, out)
}
