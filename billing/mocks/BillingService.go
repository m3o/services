// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	billing "github.com/m3o/services/billing/proto"
	client "github.com/micro/micro/v3/service/client"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BillingService is an autogenerated mock type for the BillingService type
type BillingService struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) Apply(ctx context.Context, in *billing.ApplyRequest, opts ...client.CallOption) (*billing.ApplyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.ApplyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ApplyRequest, ...client.CallOption) *billing.ApplyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ApplyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.ApplyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Portal provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) Portal(ctx context.Context, in *billing.PortalRequest, opts ...client.CallOption) (*billing.PortalResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PortalResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PortalRequest, ...client.CallOption) *billing.PortalResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PortalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PortalRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Updates provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) Updates(ctx context.Context, in *billing.UpdatesRequest, opts ...client.CallOption) (*billing.UpdatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.UpdatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.UpdatesRequest, ...client.CallOption) *billing.UpdatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UpdatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.UpdatesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
