// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	v1api "github.com/m3o/services/v1api/proto"
	"github.com/micro/micro/v3/service/client"
)

type FakeV1Service struct {
	GenerateKeyStub        func(context.Context, *v1api.GenerateKeyRequest, ...client.CallOption) (*v1api.GenerateKeyResponse, error)
	generateKeyMutex       sync.RWMutex
	generateKeyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1api.GenerateKeyRequest
		arg3 []client.CallOption
	}
	generateKeyReturns struct {
		result1 *v1api.GenerateKeyResponse
		result2 error
	}
	generateKeyReturnsOnCall map[int]struct {
		result1 *v1api.GenerateKeyResponse
		result2 error
	}
	ListKeysStub        func(context.Context, *v1api.ListRequest, ...client.CallOption) (*v1api.ListResponse, error)
	listKeysMutex       sync.RWMutex
	listKeysArgsForCall []struct {
		arg1 context.Context
		arg2 *v1api.ListRequest
		arg3 []client.CallOption
	}
	listKeysReturns struct {
		result1 *v1api.ListResponse
		result2 error
	}
	listKeysReturnsOnCall map[int]struct {
		result1 *v1api.ListResponse
		result2 error
	}
	RevokeKeyStub        func(context.Context, *v1api.RevokeRequest, ...client.CallOption) (*v1api.RevokeResponse, error)
	revokeKeyMutex       sync.RWMutex
	revokeKeyArgsForCall []struct {
		arg1 context.Context
		arg2 *v1api.RevokeRequest
		arg3 []client.CallOption
	}
	revokeKeyReturns struct {
		result1 *v1api.RevokeResponse
		result2 error
	}
	revokeKeyReturnsOnCall map[int]struct {
		result1 *v1api.RevokeResponse
		result2 error
	}
	UpdateAllowedPathsStub        func(context.Context, *v1api.UpdateAllowedPathsRequest, ...client.CallOption) (*v1api.UpdateAllowedPathsResponse, error)
	updateAllowedPathsMutex       sync.RWMutex
	updateAllowedPathsArgsForCall []struct {
		arg1 context.Context
		arg2 *v1api.UpdateAllowedPathsRequest
		arg3 []client.CallOption
	}
	updateAllowedPathsReturns struct {
		result1 *v1api.UpdateAllowedPathsResponse
		result2 error
	}
	updateAllowedPathsReturnsOnCall map[int]struct {
		result1 *v1api.UpdateAllowedPathsResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV1Service) GenerateKey(arg1 context.Context, arg2 *v1api.GenerateKeyRequest, arg3 ...client.CallOption) (*v1api.GenerateKeyResponse, error) {
	fake.generateKeyMutex.Lock()
	ret, specificReturn := fake.generateKeyReturnsOnCall[len(fake.generateKeyArgsForCall)]
	fake.generateKeyArgsForCall = append(fake.generateKeyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1api.GenerateKeyRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GenerateKeyStub
	fakeReturns := fake.generateKeyReturns
	fake.recordInvocation("GenerateKey", []interface{}{arg1, arg2, arg3})
	fake.generateKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV1Service) GenerateKeyCallCount() int {
	fake.generateKeyMutex.RLock()
	defer fake.generateKeyMutex.RUnlock()
	return len(fake.generateKeyArgsForCall)
}

func (fake *FakeV1Service) GenerateKeyCalls(stub func(context.Context, *v1api.GenerateKeyRequest, ...client.CallOption) (*v1api.GenerateKeyResponse, error)) {
	fake.generateKeyMutex.Lock()
	defer fake.generateKeyMutex.Unlock()
	fake.GenerateKeyStub = stub
}

func (fake *FakeV1Service) GenerateKeyArgsForCall(i int) (context.Context, *v1api.GenerateKeyRequest, []client.CallOption) {
	fake.generateKeyMutex.RLock()
	defer fake.generateKeyMutex.RUnlock()
	argsForCall := fake.generateKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV1Service) GenerateKeyReturns(result1 *v1api.GenerateKeyResponse, result2 error) {
	fake.generateKeyMutex.Lock()
	defer fake.generateKeyMutex.Unlock()
	fake.GenerateKeyStub = nil
	fake.generateKeyReturns = struct {
		result1 *v1api.GenerateKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) GenerateKeyReturnsOnCall(i int, result1 *v1api.GenerateKeyResponse, result2 error) {
	fake.generateKeyMutex.Lock()
	defer fake.generateKeyMutex.Unlock()
	fake.GenerateKeyStub = nil
	if fake.generateKeyReturnsOnCall == nil {
		fake.generateKeyReturnsOnCall = make(map[int]struct {
			result1 *v1api.GenerateKeyResponse
			result2 error
		})
	}
	fake.generateKeyReturnsOnCall[i] = struct {
		result1 *v1api.GenerateKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) ListKeys(arg1 context.Context, arg2 *v1api.ListRequest, arg3 ...client.CallOption) (*v1api.ListResponse, error) {
	fake.listKeysMutex.Lock()
	ret, specificReturn := fake.listKeysReturnsOnCall[len(fake.listKeysArgsForCall)]
	fake.listKeysArgsForCall = append(fake.listKeysArgsForCall, struct {
		arg1 context.Context
		arg2 *v1api.ListRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListKeysStub
	fakeReturns := fake.listKeysReturns
	fake.recordInvocation("ListKeys", []interface{}{arg1, arg2, arg3})
	fake.listKeysMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV1Service) ListKeysCallCount() int {
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	return len(fake.listKeysArgsForCall)
}

func (fake *FakeV1Service) ListKeysCalls(stub func(context.Context, *v1api.ListRequest, ...client.CallOption) (*v1api.ListResponse, error)) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = stub
}

func (fake *FakeV1Service) ListKeysArgsForCall(i int) (context.Context, *v1api.ListRequest, []client.CallOption) {
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	argsForCall := fake.listKeysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV1Service) ListKeysReturns(result1 *v1api.ListResponse, result2 error) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = nil
	fake.listKeysReturns = struct {
		result1 *v1api.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) ListKeysReturnsOnCall(i int, result1 *v1api.ListResponse, result2 error) {
	fake.listKeysMutex.Lock()
	defer fake.listKeysMutex.Unlock()
	fake.ListKeysStub = nil
	if fake.listKeysReturnsOnCall == nil {
		fake.listKeysReturnsOnCall = make(map[int]struct {
			result1 *v1api.ListResponse
			result2 error
		})
	}
	fake.listKeysReturnsOnCall[i] = struct {
		result1 *v1api.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) RevokeKey(arg1 context.Context, arg2 *v1api.RevokeRequest, arg3 ...client.CallOption) (*v1api.RevokeResponse, error) {
	fake.revokeKeyMutex.Lock()
	ret, specificReturn := fake.revokeKeyReturnsOnCall[len(fake.revokeKeyArgsForCall)]
	fake.revokeKeyArgsForCall = append(fake.revokeKeyArgsForCall, struct {
		arg1 context.Context
		arg2 *v1api.RevokeRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.RevokeKeyStub
	fakeReturns := fake.revokeKeyReturns
	fake.recordInvocation("RevokeKey", []interface{}{arg1, arg2, arg3})
	fake.revokeKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV1Service) RevokeKeyCallCount() int {
	fake.revokeKeyMutex.RLock()
	defer fake.revokeKeyMutex.RUnlock()
	return len(fake.revokeKeyArgsForCall)
}

func (fake *FakeV1Service) RevokeKeyCalls(stub func(context.Context, *v1api.RevokeRequest, ...client.CallOption) (*v1api.RevokeResponse, error)) {
	fake.revokeKeyMutex.Lock()
	defer fake.revokeKeyMutex.Unlock()
	fake.RevokeKeyStub = stub
}

func (fake *FakeV1Service) RevokeKeyArgsForCall(i int) (context.Context, *v1api.RevokeRequest, []client.CallOption) {
	fake.revokeKeyMutex.RLock()
	defer fake.revokeKeyMutex.RUnlock()
	argsForCall := fake.revokeKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV1Service) RevokeKeyReturns(result1 *v1api.RevokeResponse, result2 error) {
	fake.revokeKeyMutex.Lock()
	defer fake.revokeKeyMutex.Unlock()
	fake.RevokeKeyStub = nil
	fake.revokeKeyReturns = struct {
		result1 *v1api.RevokeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) RevokeKeyReturnsOnCall(i int, result1 *v1api.RevokeResponse, result2 error) {
	fake.revokeKeyMutex.Lock()
	defer fake.revokeKeyMutex.Unlock()
	fake.RevokeKeyStub = nil
	if fake.revokeKeyReturnsOnCall == nil {
		fake.revokeKeyReturnsOnCall = make(map[int]struct {
			result1 *v1api.RevokeResponse
			result2 error
		})
	}
	fake.revokeKeyReturnsOnCall[i] = struct {
		result1 *v1api.RevokeResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) UpdateAllowedPaths(arg1 context.Context, arg2 *v1api.UpdateAllowedPathsRequest, arg3 ...client.CallOption) (*v1api.UpdateAllowedPathsResponse, error) {
	fake.updateAllowedPathsMutex.Lock()
	ret, specificReturn := fake.updateAllowedPathsReturnsOnCall[len(fake.updateAllowedPathsArgsForCall)]
	fake.updateAllowedPathsArgsForCall = append(fake.updateAllowedPathsArgsForCall, struct {
		arg1 context.Context
		arg2 *v1api.UpdateAllowedPathsRequest
		arg3 []client.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateAllowedPathsStub
	fakeReturns := fake.updateAllowedPathsReturns
	fake.recordInvocation("UpdateAllowedPaths", []interface{}{arg1, arg2, arg3})
	fake.updateAllowedPathsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV1Service) UpdateAllowedPathsCallCount() int {
	fake.updateAllowedPathsMutex.RLock()
	defer fake.updateAllowedPathsMutex.RUnlock()
	return len(fake.updateAllowedPathsArgsForCall)
}

func (fake *FakeV1Service) UpdateAllowedPathsCalls(stub func(context.Context, *v1api.UpdateAllowedPathsRequest, ...client.CallOption) (*v1api.UpdateAllowedPathsResponse, error)) {
	fake.updateAllowedPathsMutex.Lock()
	defer fake.updateAllowedPathsMutex.Unlock()
	fake.UpdateAllowedPathsStub = stub
}

func (fake *FakeV1Service) UpdateAllowedPathsArgsForCall(i int) (context.Context, *v1api.UpdateAllowedPathsRequest, []client.CallOption) {
	fake.updateAllowedPathsMutex.RLock()
	defer fake.updateAllowedPathsMutex.RUnlock()
	argsForCall := fake.updateAllowedPathsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV1Service) UpdateAllowedPathsReturns(result1 *v1api.UpdateAllowedPathsResponse, result2 error) {
	fake.updateAllowedPathsMutex.Lock()
	defer fake.updateAllowedPathsMutex.Unlock()
	fake.UpdateAllowedPathsStub = nil
	fake.updateAllowedPathsReturns = struct {
		result1 *v1api.UpdateAllowedPathsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) UpdateAllowedPathsReturnsOnCall(i int, result1 *v1api.UpdateAllowedPathsResponse, result2 error) {
	fake.updateAllowedPathsMutex.Lock()
	defer fake.updateAllowedPathsMutex.Unlock()
	fake.UpdateAllowedPathsStub = nil
	if fake.updateAllowedPathsReturnsOnCall == nil {
		fake.updateAllowedPathsReturnsOnCall = make(map[int]struct {
			result1 *v1api.UpdateAllowedPathsResponse
			result2 error
		})
	}
	fake.updateAllowedPathsReturnsOnCall[i] = struct {
		result1 *v1api.UpdateAllowedPathsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeV1Service) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateKeyMutex.RLock()
	defer fake.generateKeyMutex.RUnlock()
	fake.listKeysMutex.RLock()
	defer fake.listKeysMutex.RUnlock()
	fake.revokeKeyMutex.RLock()
	defer fake.revokeKeyMutex.RUnlock()
	fake.updateAllowedPathsMutex.RLock()
	defer fake.updateAllowedPathsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV1Service) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1api.V1Service = new(FakeV1Service)
