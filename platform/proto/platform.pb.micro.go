// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/m3o/services/platform/proto/platform.proto

package platform

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Platform service

func NewPlatformEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Platform service

type PlatformService interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*DeleteNamespaceResponse, error)
	CreateImagePullSecret(ctx context.Context, in *CreateImagePullSecretRequest, opts ...client.CallOption) (*CreateImagePullSecretResponse, error)
	DeleteImagePullSecret(ctx context.Context, in *DeleteImagePullSecretRequest, opts ...client.CallOption) (*DeleteImagePullSecretResponse, error)
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...client.CallOption) (*CreateServiceAccountResponse, error)
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...client.CallOption) (*DeleteServiceAccountResponse, error)
}

type platformService struct {
	c    client.Client
	name string
}

func NewPlatformService(name string, c client.Client) PlatformService {
	return &platformService{
		c:    c,
		name: name,
	}
}

func (c *platformService) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...client.CallOption) (*CreateNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.CreateNamespace", in)
	out := new(CreateNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...client.CallOption) (*DeleteNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.DeleteNamespace", in)
	out := new(DeleteNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) CreateImagePullSecret(ctx context.Context, in *CreateImagePullSecretRequest, opts ...client.CallOption) (*CreateImagePullSecretResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.CreateImagePullSecret", in)
	out := new(CreateImagePullSecretResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) DeleteImagePullSecret(ctx context.Context, in *DeleteImagePullSecretRequest, opts ...client.CallOption) (*DeleteImagePullSecretResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.DeleteImagePullSecret", in)
	out := new(DeleteImagePullSecretResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...client.CallOption) (*CreateServiceAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.CreateServiceAccount", in)
	out := new(CreateServiceAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...client.CallOption) (*DeleteServiceAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.DeleteServiceAccount", in)
	out := new(DeleteServiceAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Platform service

type PlatformHandler interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest, *CreateNamespaceResponse) error
	DeleteNamespace(context.Context, *DeleteNamespaceRequest, *DeleteNamespaceResponse) error
	CreateImagePullSecret(context.Context, *CreateImagePullSecretRequest, *CreateImagePullSecretResponse) error
	DeleteImagePullSecret(context.Context, *DeleteImagePullSecretRequest, *DeleteImagePullSecretResponse) error
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest, *CreateServiceAccountResponse) error
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest, *DeleteServiceAccountResponse) error
}

func RegisterPlatformHandler(s server.Server, hdlr PlatformHandler, opts ...server.HandlerOption) error {
	type platform interface {
		CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error
		DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *DeleteNamespaceResponse) error
		CreateImagePullSecret(ctx context.Context, in *CreateImagePullSecretRequest, out *CreateImagePullSecretResponse) error
		DeleteImagePullSecret(ctx context.Context, in *DeleteImagePullSecretRequest, out *DeleteImagePullSecretResponse) error
		CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, out *CreateServiceAccountResponse) error
		DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, out *DeleteServiceAccountResponse) error
	}
	type Platform struct {
		platform
	}
	h := &platformHandler{hdlr}
	return s.Handle(s.NewHandler(&Platform{h}, opts...))
}

type platformHandler struct {
	PlatformHandler
}

func (h *platformHandler) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, out *CreateNamespaceResponse) error {
	return h.PlatformHandler.CreateNamespace(ctx, in, out)
}

func (h *platformHandler) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, out *DeleteNamespaceResponse) error {
	return h.PlatformHandler.DeleteNamespace(ctx, in, out)
}

func (h *platformHandler) CreateImagePullSecret(ctx context.Context, in *CreateImagePullSecretRequest, out *CreateImagePullSecretResponse) error {
	return h.PlatformHandler.CreateImagePullSecret(ctx, in, out)
}

func (h *platformHandler) DeleteImagePullSecret(ctx context.Context, in *DeleteImagePullSecretRequest, out *DeleteImagePullSecretResponse) error {
	return h.PlatformHandler.DeleteImagePullSecret(ctx, in, out)
}

func (h *platformHandler) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, out *CreateServiceAccountResponse) error {
	return h.PlatformHandler.CreateServiceAccount(ctx, in, out)
}

func (h *platformHandler) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, out *DeleteServiceAccountResponse) error {
	return h.PlatformHandler.DeleteServiceAccount(ctx, in, out)
}
