// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	mock "github.com/stretchr/testify/mock"

	platform "github.com/m3o/services/platform/proto"
)

// PlatformService is an autogenerated mock type for the PlatformService type
type PlatformService struct {
	mock.Mock
}

// CreateNamespace provides a mock function with given fields: ctx, in, opts
func (_m *PlatformService) CreateNamespace(ctx context.Context, in *platform.CreateNamespaceRequest, opts ...client.CallOption) (*platform.CreateNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *platform.CreateNamespaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *platform.CreateNamespaceRequest, ...client.CallOption) *platform.CreateNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.CreateNamespaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *platform.CreateNamespaceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: ctx, in, opts
func (_m *PlatformService) DeleteNamespace(ctx context.Context, in *platform.DeleteNamespaceRequest, opts ...client.CallOption) (*platform.DeleteNamespaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *platform.DeleteNamespaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *platform.DeleteNamespaceRequest, ...client.CallOption) *platform.DeleteNamespaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.DeleteNamespaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *platform.DeleteNamespaceRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
