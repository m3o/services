// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/micro/micro/v3/service/client"

	go_micro_service_invite "github.com/m3o/services/invite/proto"

	mock "github.com/stretchr/testify/mock"
)

// InviteService is an autogenerated mock type for the InviteService type
type InviteService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *InviteService) Delete(ctx context.Context, in *go_micro_service_invite.CreateRequest, opts ...client.CallOption) (*go_micro_service_invite.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_invite.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) *go_micro_service_invite.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_invite.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, in, opts
func (_m *InviteService) User(ctx context.Context, in *go_micro_service_invite.CreateRequest, opts ...client.CallOption) (*go_micro_service_invite.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_invite.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) *go_micro_service_invite.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_invite.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_invite.CreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, in, opts
func (_m *InviteService) Validate(ctx context.Context, in *go_micro_service_invite.ValidateRequest, opts ...client.CallOption) (*go_micro_service_invite.ValidateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *go_micro_service_invite.ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *go_micro_service_invite.ValidateRequest, ...client.CallOption) *go_micro_service_invite.ValidateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_micro_service_invite.ValidateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *go_micro_service_invite.ValidateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
