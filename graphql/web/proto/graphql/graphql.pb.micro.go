// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/services/graphql/api/proto/graphql/graphql.proto

package go_micro_api_graphql

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/v2/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Graphql service

type GraphqlService interface {
	Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type graphqlService struct {
	c    client.Client
	name string
}

func NewGraphqlService(name string, c client.Client) GraphqlService {
	return &graphqlService{
		c:    c,
		name: name,
	}
}

func (c *graphqlService) Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Graphql.Call", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Graphql service

type GraphqlHandler interface {
	Call(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterGraphqlHandler(s server.Server, hdlr GraphqlHandler, opts ...server.HandlerOption) error {
	type graphql interface {
		Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Graphql struct {
		graphql
	}
	h := &graphqlHandler{hdlr}
	return s.Handle(s.NewHandler(&Graphql{h}, opts...))
}

type graphqlHandler struct {
	GraphqlHandler
}

func (h *graphqlHandler) Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.GraphqlHandler.Call(ctx, in, out)
}
